total_population %>%
select(Country, Continent, `1960`) %>%
na.omit()  %>%
summarize(sum(`1960`))
na_pop <- total_population %>%
select(Country, Continent, `1960`) %>%
filter(is.na(Continent))#%>%
total_population %>%
select(Country, Continent, `1960`) %>%
filter(Country=="World")
countries_world <- countries_world %>%
mutate(Continent = ifelse(Region=="NORTHERN AMERICA" | Region=="LATIN AMER. & CARIB", "America", ifelse(Region=="NORTHERN AFRICA" | Region=="SUB-SAHARAN AFRICA", "Africa", ifelse(Region=="BALTICS" | Region=="WESTERN EUROPE" | Region=="EASTERN EUROPE" | Region=="C.W. OF IND. STATES", "Europe", ifelse(Region=="NEAR EAST" | Region=="ASIA (EX. NEAR EAST)", "Asia", "Oceania"))))) %>%
select(Country, Continent, everything())
countries_world %>%
group_by(Region) %>%
count() %>%
arrange(n)
source('~/Data Science/exam_big_data/world.R')
{library(shiny)
library(shinythemes)
library(ggplot2)
library(tools)
library(DT)
library(dplyr)
library(shinydashboard)
library(stringr)
}
density <- read.csv("Clean/density_clean.csv")
population <- read.csv("Clean/population_clean.csv")
pop_per_continent <- read.csv("Clean/pop_per_continent.csv")
growth <- read.csv("Clean/growth_clean.csv")
ui <- fluidPage(theme = shinytheme("cerulean"),
titlePanel("World Population Study, 1960 - 2017"),
# Sidebar layout with a input and output definitions
sidebarLayout(
# Inputs
sidebarPanel(
wellPanel(
h3("Plot 1"),
selectInput(inputId = "x", label = "X-axis:",
choices = c("year"),
selected = "year"),
selectInput(inputId = "y", label = "Y-axis:",
choices = c("WorldPopulation","percentage_growth"),
selected = "WorldPopulation"),
selectInput(inputId = "z",label = "Color by:",
choices = c("percentage_growth"),
selected = "percentage_growth")
),
wellPanel(
h3("Plot 2"),
# Select variable for x-axis
selectInput(inputId = "x2", label = "x-axis: Population",
choices = c("1960" = "X1960",
"1970" = "X1970",
"1980" = "X1980",
"1990" = "X1990",
"2000" = "X2000",
"2010" = "X2010",
"2017" = "X2017"),
selected = "1960"),
selectInput(inputId = "y2", label = "Y-axis: Area",
choices = c("Area", "logArea"),
selected = "Area"),
selectInput(inputId = "z2",label = "Color by:",
choices = c("Continent", "Region"),
selected = "Continent"),
textInput(inputId = "plot_title",
label = "Plot title",
placeholder = "Enter text for plot title")
#hr(),                # Horizontal line for visual separation
),
wellPanel(
h3("Subsetting"),
checkboxGroupInput(inputId = "selected_continent",
label = "Select Continent:",
choices = c("Europe", "Africa", "Asia", "Oceania", "America"),
selected = c("Europe", "Africa", "Asia", "Oceania", "America"))
),
#br(), br(),
h5("Built with",
img(src = "http://www.worldbank.org/content/dam/wbr/logo/logo-wb-header-en.svg", height = "30px") )
),
# Outputs
mainPanel(
#plotOutput(outputId = "scatterplot"),
#plotOutput(outputId = "scatterplot2"),
#textOutput(outputId = "description")
tabsetPanel(type = "tabs",
# Tab 1: Plot
tabPanel(title = "Plot 1",
plotOutput(outputId = "scatterplot")
),
# Tab 2: Data
tabPanel(title = "Plot 2",
br(),
plotOutput(outputId = "scatterplot2"),
h5(textOutput("description"))
)
)
)
)
)
server <- function(input, output) {
# Create a subset of data filtering for selected title types
population_subset <- reactive({
req(input$selected_continent)
filter(population, Continent %in% input$selected_continent)
})
# Convert plot_title toTitleCase
pretty_plot_title <- reactive({ toTitleCase(input$plot_title) })
# Create the scatterplot object the plotOutput function is expecting
output$scatterplot <- renderPlot({
ggplot(growth, aes_string(x = input$x, y = input$y, color = input$z)) +  geom_point()
})
output$scatterplot2 <- renderPlot({
ggplot(population_subset(), aes_string(x = input$x2, y = input$y2, color = input$z2)) +
geom_point()
})
# Create descriptive text
output$description <- renderText({
paste0("The plot above titled '", pretty_plot_title(), "' visualizes the relationship between ",
input$x2, " and ", input$y2, ", conditional on ", input$z2, ".")
})
}
shinyApp(ui = ui, server = server)
fer <- read_csv("Datasets/fertility_clean.csv", skip=4)
{
library(dplyr)
library(ggplot2)
library(tidyr)
library(dplyr)
library(readr)
library(plotly)
}
setwd('/home/nicole/Data Science/exam_big_data')
pop <- read.csv("Datasets/total_population.csv", skip=4, stringsAsFactors = FALSE)
pop2 <- read_csv("Datasets/total_population.csv", skip=4)
fer <- read.csv("Datasets/fertility_clean.csv", skip=4)
fer <- read.csv("Datasets/fertility.csv", skip=4)
pop <- read.csv("Datasets/total_population.csv", skip=4, stringsAsFactors = FALSE)
pop2 <- read_csv("Datasets/total_population.csv", skip=4)
fer <- read.csv("Datasets/fertility.csv", skip=4)
{
w <- pop %>%
#filter(`Country Name`=="World")%>%
#select(-`Country Name`, -`Country Code`, -`Indicator Name`, -`Indicator Code`, -X63)
filter(Country.Name=="World")%>%
select(-Country.Name, -Country.Code, -Indicator.Name, -Indicator.Code, -X)
colnames(w) <- c(substring(colnames(w[,1:length(w)]), 2))
colnames(w)
w[2,]<- colnames(w)
w <- data.frame(t(w))
colnames(w) <- c("world_pop", "year")
w$world_pop <- as.numeric(as.character(w$world_pop))
w$year <- as.numeric(as.character(w$year))
}
View(w)
View(fer)
f <- fert %>%
filter(Country=="World")
View(f)
f <- fert %>%
filter(Country=="World")%>%
select(-Country.Name, -Country.Code, -Indicator.Name, -Indicator.Code, -X)
fer <- read.csv("Datasets/fertility.csv", skip=4)
f <- fert %>%
filter(Country=="World")%>%
select(-Country.Name, -Country.Code, -Indicator.Name, -Indicator.Code, -X)
f <- fer %>%
filter(Country=="World")%>%
select(-Country.Name, -Country.Code, -Indicator.Name, -Indicator.Code, -X)
f <- fer %>%
filter(Country.Name=="World")%>%
select(-Country.Name, -Country.Code, -Indicator.Name, -Indicator.Code, -X)
w <- pop %>%
#filter(`Country Name`=="World")%>%
#select(-`Country Name`, -`Country Code`, -`Indicator Name`, -`Indicator Code`, -X63)
filter(Country.Name=="World")%>%
select(-Country.Name, -Country.Code, -Indicator.Name, -Indicator.Code, -X)
colnames(w) <- c(substring(colnames(w[,1:length(w)]), 2))
colnames(w)
clean <- function(ds){
a <- ds %>%
#filter(`Country Name`=="World")%>%
#select(-`Country Name`, -`Country Code`, -`Indicator Name`, -`Indicator Code`, -X63)
filter(Country.Name=="World")%>%
select(-Country.Name, -Country.Code, -Indicator.Name, -Indicator.Code, -X)
colnames(a) <- c(substring(colnames(w[,1:length(a)]), 2))
return(a)
}
f <- clean(fer)
clean <- function(ds){
a <- ds %>%
#filter(`Country Name`=="World")%>%
#select(-`Country Name`, -`Country Code`, -`Indicator Name`, -`Indicator Code`, -X63)
filter(Country.Name=="World")%>%
select(-Country.Name, -Country.Code, -Indicator.Name, -Indicator.Code, -X)
colnames(a) <- c(substring(colnames(a[,1:length(a)]), 2))
return(a)
}
f <- clean(fer)
w <- clean(pop)
w[2,]<- colnames(w)
w <- data.frame(t(w))
colnames(w) <- c("world_pop", "year")
w$world_pop <- as.numeric(as.character(w$world_pop))
w$year <- as.numeric(as.character(w$year))
w$fert <- as.numeric(as.character(f[1,]))
nrow(f)
ncol(f)
nrow(w)
p <- fert%>%filter(Country.Name=="World")
p <- fer%>%filter(Country.Name=="World")
View(p)
pop <- read.csv("Datasets/total_population.csv", skip=4, stringsAsFactors = FALSE)
pop2 <- read_csv("Datasets/total_population.csv", skip=4)
fer <- read.csv("Datasets/fertility.csv", skip=4)
{
clean <- function(ds){
a <- ds %>%
#filter(`Country Name`=="World")%>%
#select(-`Country Name`, -`Country Code`, -`Indicator Name`, -`Indicator Code`, -X63)
filter(Country.Name=="World")%>%
select(-Country.Name, -Country.Code, -Indicator.Name, -Indicator.Code, -X)
colnames(a) <- c(substring(colnames(a[,1:length(a)]), 2))
return(a)
}
#   w <- pop %>%
#   #filter(`Country Name`=="World")%>%
#   #select(-`Country Name`, -`Country Code`, -`Indicator Name`, -`Indicator Code`, -X63)
#   filter(Country.Name=="World")%>%
#   select(-Country.Name, -Country.Code, -Indicator.Name, -Indicator.Code, -X)
# colnames(w) <- c(substring(colnames(w[,1:length(w)]), 2))
# colnames(w)
w <- clean(pop)
f <- clean(fer)
w[2,]<- colnames(w)
w <- data.frame(t(w))
colnames(w) <- c("world_pop", "year")
w$world_pop <- as.numeric(as.character(w$world_pop))
w$year <- as.numeric(as.character(w$year))
w$fert <- as.numeric(as.character(f[1,]))
}
newdata <- seq(2018,2100)
newdata <- data.frame(newdata)
View(w)
w[59, ]<- NULL
w <- w[-59]
w <- w[-59]
nrow(w)
ncol(f)
View(f)
f$`2017` <- NULL
f$`2018` <- NULL
w <- w[-58]
nrow(w)
w <- w[-58,]
w$fert <- as.numeric(as.character(f[1,]))
newdata <- seq(2017,2100)
newdata <- data.frame(newdata)
colnames(newdata)[1] <- "year"
mod <- lm(world_pop ~ year, w)
lmod <- predict(mod, newdata)
newdata$lm <- data.frame(lmod)
mod <- nls(world_pop ~ SSlogis(year, fert, phi1, phi2, phi3), data = w)
mod <- nls(world_pop ~ SSlogis(year,, phi1, phi2, phi3), data = w)
mod <- nls(world_pop ~ SSlogis(year, phi1, phi2, phi3), data = w)
?nls
mod <- nls(world_pop ~ SSlogis(year+fert, phi1, phi2, phi3), data = w)
pred <- predict(mod, newdata)
vv <- data.frame(pred)
newdata$world_pop <- data.frame(pred[1:83])
newdata <- newdata %>%
select(world_pop, year, lm)
newdata$world_pop <- as.numeric(unlist(newdata$world_pop))
newdata$lm <- as.numeric(unlist(newdata$lm))
w$lm <- w$world_pop
tot <- rbind(w, newdata)
p1 <- plot_ly(tot, x = ~year, y = ~world_pop, name = 'Logistic model', type = 'scatter', mode = 'lines+markers') %>%
add_trace(y = ~lm, name = 'Lineaar model', mode = 'lines+markers') %>%
layout(title = "Predicted trend of world population growth until 2100",
xaxis = list(title = "Year"),
yaxis = list (title = paste("Pop quantity")))
p1
pred <- predict(mod, newdata)
mod <- nls(world_pop ~ SSlogis(year, phi1, phi2, phi3), data = w)
pred <- predict(mod, newdata)
vv <- data.frame(pred)
newdata$world_pop <- data.frame(pred[1:83])
newdata <- newdata %>%
select(world_pop, year, lm)
newdata$world_pop <- as.numeric(unlist(newdata$world_pop))
newdata$lm <- as.numeric(unlist(newdata$lm))
w$lm <- w$world_pop
tot <- rbind(w, newdata)
p1 <- plot_ly(tot, x = ~year, y = ~world_pop, name = 'Logistic model', type = 'scatter', mode = 'lines+markers') %>%
add_trace(y = ~lm, name = 'Lineaar model', mode = 'lines+markers') %>%
layout(title = "Predicted trend of world population growth until 2100",
xaxis = list(title = "Year"),
yaxis = list (title = paste("Pop quantity")))
p1
pred <- predict(mod, newdata)
vv <- data.frame(pred)
newdata$world_pop <- data.frame(pred[1:82])
newdata$world_pop <- data.frame(pred[1:83])
newdata$world_pop <- data.frame(pred[1:84])
newdata <- newdata %>%
select(world_pop, year, lm)
newdata$world_pop <- as.numeric(unlist(newdata$world_pop))
newdata$lm <- as.numeric(unlist(newdata$lm))
w$lm <- w$world_pop
tot <- rbind(w, newdata)
p1 <- plot_ly(tot, x = ~year, y = ~world_pop, name = 'Logistic model', type = 'scatter', mode = 'lines+markers') %>%
add_trace(y = ~lm, name = 'Lineaar model', mode = 'lines+markers') %>%
layout(title = "Predicted trend of world population growth until 2100",
xaxis = list(title = "Year"),
yaxis = list (title = paste("Pop quantity")))
p1
w <- clean(pop)
f <- clean(fer)
w[2,]<- colnames(w)
w <- data.frame(t(w))
colnames(w) <- c("world_pop", "year")
w$world_pop <- as.numeric(as.character(w$world_pop))
w$year <- as.numeric(as.character(w$year))
w <- w[-59]
}
newdata <- seq(2018,2100)
newdata <- data.frame(newdata)
colnames(newdata)[1] <- "year"
mod <- lm(world_pop ~ year, w)
lmod <- predict(mod, newdata)
newdata$lm <- data.frame(lmod)
mod <- nls(world_pop ~ SSlogis(year, phi1, phi2, phi3), data = w)
pred <- predict(mod, newdata)
vv <- data.frame(pred)
newdata$world_pop <- data.frame(pred[1:83])
newdata <- newdata %>%
select(world_pop, year, lm)
newdata$world_pop <- as.numeric(unlist(newdata$world_pop))
newdata$lm <- as.numeric(unlist(newdata$lm))
w$lm <- w$world_pop
tot <- rbind(w, newdata)
p1 <- plot_ly(tot, x = ~year, y = ~world_pop, name = 'Logistic model', type = 'scatter', mode = 'lines+markers') %>%
add_trace(y = ~lm, name = 'Lineaar model', mode = 'lines+markers') %>%
layout(title = "Predicted trend of world population growth until 2100",
xaxis = list(title = "Year"),
yaxis = list (title = paste("Pop quantity")))
p1
{library(shiny)
library(shinythemes)
library(ggplot2)
#library(tools)
#library(DT)
library(dplyr)
library(shinydashboard)
#library(stringr)
}
{
library(dplyr)
library(ggplot2)
library(plotly)
library(leaflet)
library(readODS)
}
early_years <- read.ods("Datasets/world_early_ages.ods")
early_years <- data.frame(early_years)
early_years <- early_years[2:nrow(early_years),]
early_years[,1] <- as.integer(early_years[,1])
early_years[,2] <- as.integer(early_years[,2])
early_years[,3] <- as.integer(early_years[,3])
colnames(early_years) <- c("year","low","high")
early_years <- early_years %>%
mutate(average = (low+high)/2)
ggplot(data=early_years, aes(x=year))+
geom_line(aes(y = low, colour="Lower Estimate")) +
geom_line(aes(y = high, colour="Upper Estimate")) +
xlab("Years")+
ylab("Population")+
theme_minimal()+
ggtitle("Population Estimation of Early Ages (200 D.C - 1800 D.C)")
p <- plot_ly(early_years, x = ~year, y = ~low, name = 'trace 0', type = 'scatter', mode = 'lines') %>%
add_trace(y = ~high, name = 'trace 1', mode = 'lines+markers')
p
p <- plot_ly(early_years, x = ~year, y = ~high, type = 'scatter', mode = 'lines',
line = list(color = 'rgb(150, 200, 250)'),
showlegend = FALSE, name = 'High 2014') %>%
add_trace(y = ~low, type = 'scatter', mode = 'lines',
fill = 'tonexty', fillcolor='rgb(150, 200, 250)', line = list(color = 'transparent'),
showlegend = FALSE, name = 'Low 2014') %>%
add_trace(x = ~year, y = ~average, type = 'scatter', mode = 'linesandmarkers', marker=list( size=5 , opacity=0.5),
line = list(color='rgb(70,150,80)'),marker=list( size=5 , opacity=0.5, color="black"),
name = 'Average') %>%
layout(title = "World Population Estimation of Early Ages\n (1 A.D - 1800 A.D)",
paper_bgcolor='rgb(255,255,255)',
xaxis = list(title = "Years",
#gridcolor = 'rgb(255,255,255)',
showgrid = TRUE,
showline = FALSE,
showticklabels = TRUE,
tickcolor = 'rgb(127,127,127)',
ticks = 'outside',
zeroline = FALSE),
yaxis = list(title = "World Population (in millions)",
#gridcolor = 'rgb(255,255,255)',
showgrid = TRUE,
showline = FALSE,
showticklabels = TRUE,
tickcolor = 'rgb(127,127,127)',
ticks = 'outside',
zeroline = FALSE))
p
chart_link = api_create(p, filename="line-mode1")
chart_link
{
library(leaflet)
library(dplyr)
library(rgdal)
library(ggplot2)
library(geojsonio)
library(rworldmap)
library(countrycode)
library(htmlwidgets)
library(htmltools)
library(tidyr)
library(stringr)
}
setwd('/home/nicole/Data Science/exam_big_data/Clean')
population2 <- read.csv("population_clean.csv")
population <- read.csv("population_clean_with_NAs.csv")
density2 <- read.csv("density_clean.csv")
density <- read.csv("density_clean_with_NAs.csv")
population <- density
colnames(population)[2] <- "name"
{
levels(population$name) <- c(levels(population$name), "United States of America")
population$name[population$name == 'United States'] <- "United States of America"
levels(population$name) <- c(levels(population$name), "Russia")
population$name[population$name == 'Russian Federation'] <- "Russia"
levels(population$name) <- c(levels(population$name), "Democratic Republic of the Congo")
population$name[population$name == "Congo, Dem. Rep."] <- "Democratic Republic of the Congo"
levels(population$name) <- c(levels(population$name), "Iran")
population$name[population$name == "Iran, Islamic Rep."] <- "Iran"
levels(population$name) <- c(levels(population$name), "Republic of Serbia")
population$name[population$name == "Serbia"] <- "Republic of Serbia"
levels(population$name) <- c(levels(population$name), "Egypt")
population$name[population$name == "Egypt, Arab Rep."] <- "Egypt"
levels(population$name) <- c(levels(population$name), "Venezuela")
population$name[population$name == 'Venezuela, RB'] <- "Venezuela"
levels(population$name) <- c(levels(population$name), "United Republic of Tanzania")
population$name[population$name == "Tanzania"] <- "United Republic of Tanzania"
levels(population$name) <- c(levels(population$name), "Yemen")
population$name[population$name == 'Yemen, Rep.'] <- "Yemen"
levels(population$name) <- c(levels(population$name), "Ivory Coast")
population$name[population$name == "Cote d'Ivoire"] <- "Ivory Coast"
levels(population$name) <- c(levels(population$name), "Kyrgyzstan")
population$name[population$name == "Kyrgyz Republic"] <- "Kyrgyzstan"
levels(population$name) <- c(levels(population$name), "Syria")
population$name[population$name == "Syrian Arab Republic"] <- "Syria"
levels(population$name) <- c(levels(population$name), "Republic of the Congo")
population$name[population$name == "Congo, Rep."] <- "Republic of the Congo"
levels(population$name) <- c(levels(population$name), "Laos")
population$name[population$name == "Lao PDR"] <- "Laos"
levels(population$name) <- c(levels(population$name), "Slovakia")
population$name[population$name == "Slovak Republic"] <- "Slovakia"
levels(population$name) <- c(levels(population$name), "Macedonia")
population$name[population$name == "Macedonia, FYR"] <- "Macedonia"
levels(population$name) <- c(levels(population$name), "Guinea Bissau")
population$name[population$name == "Guinea-Bissau"] <- "Guinea Bissau"
levels(population$name) <- c(levels(population$name), "South Korea")
population$name[population$name == "Korea, Rep."] <- "South Korea"
levels(population$name) <- c(levels(population$name), "North Korea")
population$name[population$name == "Korea, Dem. People’s Rep."] <- "North Korea"
}
setwd('/home/nicole/Data Science/exam_big_data')
states <- geojsonio::geojson_read("prova.geo.json", what = "sp")
class(states)
prova <- merge(states, population, by="name")
m <- leaflet(prova) %>%
setView(-1, 42, zoom=2) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
bins <- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf)
pal <- colorBin("YlOrRd", domain = states$density, bins = bins)
labels <- sprintf(
"<strong>%s</strong><br/>%g people / m<sup>2</sup>",
prova$name, prova$Density2017
) %>% lapply(htmltools::HTML)
m <- m %>% addPolygons(
fillColor = ~pal(Density2017),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
m
chart_link = api_create(m, filename="worldmap")
chart_link
chart_link = api_create(m, filename="worldmap")
