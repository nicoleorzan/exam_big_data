color = 'rgb(47,27, 255)',
size = 20,
opacity=0.7,
line = list(
color = 'rgb(21, 180, 180)',
width = 3
)
)) %>%
layout(title = "World Ferility Rate",
xaxis = list(title = "Year"),
yaxis = list (title = paste("PGR of ",place)))
p4
p4 <- plot_ly(fert, x = ~year, y = ~fertility, name = 'World Ferility Rate',
type = 'scatter', mode = 'lines+markers',
marker = list(
color = 'rgb(47,27, 255)',
size = 20,
opacity=0.7,
line = list(
color = 'rgb(21, 230, 180)',
width = 3
)
)) %>%
layout(title = "World Ferility Rate",
xaxis = list(title = "Year"),
yaxis = list (title = paste("PGR of ",place)))
p4
{
library(dplyr)
library(ggplot2)
library(rworldmap)
library(countrycode)
library(tidyr)
library(stringr)
library(plotly)
}
birth_rate <- read.csv("Datasets/birth_rate.csv", skip=4)
death_rate <- read.csv("Datasets/death_rate.csv", skip=4)
tot_pop <- read.csv("Datasets/total_population.csv", skip=4)
tot_pop2 <- read.csv("Datasets/pop_italy_earlyages.csv")
tot_pop2$pop = tot_pop2$pop*1000
dem_trans <- function(place) {
birth_rate <- birth_rate %>%
filter(Country.Name==place)
death_rate <- death_rate %>%
filter(Country.Name==place)
tot_pop <- tot_pop %>%
filter(Country.Name==place)
colnames(birth_rate) <- c("Country", "Country.Code", "Indicator.Name", "Indicator.Code", substring(colnames(birth_rate[,6:length(birth_rate)-1]), 2), "X")
colnames(death_rate) <- c("Country", "Country.Code", "Indicator.Name", "Indicator.Code", substring(colnames(death_rate[,6:length(death_rate)-1]), 2), "X")
colnames(tot_pop) <- c("Country", "Country.Code", "Indicator.Name", "Indicator.Code", substring(colnames(tot_pop[,6:length(tot_pop)-1]), 2), "X")
birth_rate[1:4] <- NULL; death_rate[1:4] <- NULL; tot_pop[1:4] <- NULL
birth <- gather(birth_rate, key="year", "births", 1:ncol(birth_rate))
death <- gather(death_rate, key="year", "deaths", 1:ncol(death_rate))
pop <- gather(tot_pop, key="year", "quantity", 1:ncol(tot_pop))
birth <- birth[-c(58,59),]
death <- death[-c(58,59),]
pop <- pop[-c(58,59),]
#pop$quantity <- pop$quantity/10000000
tmp <- left_join(birth, death, by="year")
return(left_join(tmp, pop, by="year"))
}
place <- "Italy"
full <- dem_trans(place)
p1 <- plot_ly(full, x = ~year, y = ~births, name = 'Births', type = 'scatter', mode = 'lines+markers',width = 1200, height = 400) %>%
add_trace(y = ~deaths, name = 'Deaths', mode = 'lines+markers') %>%
layout(title = "Demoghraphic Transition",
xaxis = list(title = "Year"),
yaxis = list (title = paste("Deaths/Births (per 1000 people) in ",place)))
p2 <- plot_ly(full, x = ~year, y = ~quantity, name = 'Population', type = 'scatter', mode = 'lines+markers',width = 1200, height = 400) %>%
layout(title = paste("Demoghraphic Transition of",place),
xaxis = list(title = "Year"),
yaxis = list (title = paste(place, "'s Total population"))#,
# shapes = list(list(type = "rect",
#            fillcolor = "blue", line = list(color = "blue"), opacity = 0.3,
#            x0 = "1980-01-01", x1 = "1985-01-01", xref = "x",
#            y0 = 4, y1 = 12.5, yref = "y"),
#       list(type = "rect",
#         fillcolor = "blue", line = list(color = "blue"), opacity = 0.2,
#         x0 = "2000-01-01", x1 = "2005-01-01", xref = "x",
#         y0 = 4, y1 = 12.5, yref = "y"))
)
ptrans <- subplot(p1, p2, shareX = TRUE, titleX = TRUE, titleY = TRUE, margin = c(0.02,0.02,1,1))
ptrans
p_pop <- plot_ly(tot_pop2, x = ~year, y = ~pop, name = 'population', type = 'scatter', mode = 'lines+markers',width = 900, height = 350) %>%
layout(title = "Population amount",
xaxis = list(title = "Year\n <a href='http://www.populstat.info/Europe/italyc.htm'>Source of the Data </a>"),
yaxis = list (title = paste("Total population of ",place)),
margin = c(0.02,0.02,0.02,0.02),
shapes = list(list(type = "rect",
fillcolor = "green", line = list(color = "green"), opacity = 0.5,
x0 = "1960", x1 = "2005", xref = "x",
y0 = 400, y1 = 60000000, yref = "y")) )
p_pop
full$year <- as.numeric(full$year)
full2 <- full %>%
select(q =quantity, y=year)%>%
mutate(p = ((q-lag(q))/(lag(q))))
ggplot(full2, aes(x=y, y=p))+geom_line()
p1 <- plot_ly(full2, x = ~y, y = ~p, name = 'PGR', type = 'scatter', mode = 'lines+markers') %>%
layout(title = "Demoghraphic Transition: PGR",
xaxis = list(title = "Year"),
yaxis = list (title = paste("PGR of ",place)))
p1
italy <- tot_pop %>%
filter(Country.Name==place)
colnames(italy) <- c("Country", "Country.Code", "Indicator.Name", "Indicator.Code", substring(colnames(italy[,6:length(italy)-1]), 2), "X")
italy[1:4] <- NULL
it <- gather(italy, key="year", "population", 1:ncol(italy))
it <- it[-c(58,59),]
it <-rbind(it, data.frame(year = c(2017), population=c(60551416)))
full2$col = ifelse(full2$p>0, "blue", "green")
ggplot(full2, aes(x=y, y=p, colour=col)) +
theme_minimal()+
geom_bar(stat='identity', width=.5)  +
scale_fill_manual(name="Mileage",
labels = c("Above Average", "Below Average"),
values = c("above"="#00ba38", "below"="#f8766d")) +
labs(subtitle="Divergence from 0 of PGR",
title= "Population Growth Rate of Italy") +
coord_flip()+
ylab("Population Growth Rate value")+xlab("Year")+
theme(legend.position="none")+
theme(plot.title = element_text(size=30), axis.title.x = element_text(size=24),
plot.subtitle = element_text(size=24),
axis.title.y = element_text(size=26), axis.text=element_text(size=20),
legend.text=element_text(size=13), legend.title=element_text(size=14))
f <- read.csv("Clean/fertility_clean.csv")
i <- read.csv("Clean/clean_immuniz.csv")
cleaning <- function(f, name){
f <- f %>%
filter(Country=="World") %>%
select(-X, -Area, -Country, -Country.Code, -Region, -Continent)
colnames(f) <- c( substring(colnames(f[,1:length(f)]), 2))
ff <- gather(f, key="year", name, 1:ncol(f))
ff$year <- as.numeric(ff$year)
return(ff)
}
fert <- cleaning(f, "fertility")
imm <- cleaning(i, "immuniz")
colnames(imm)[2] <- "immunization"
colnames(fert)[2] <- "fertility"
f1 <- list(
color = "lightgrey"
)
p4 <- plot_ly(fert, x = ~year, y = ~fertility, name = 'World Ferility Rate',
type = 'scatter', mode = 'lines+markers',
marker = list(
color = 'rgb(47,27, 255)',
size = 20,
opacity=0.7,
line = list(
color = 'rgb(21, 230, 180)',
width = 3
)
)) %>%
layout(title = "World Ferility Rate",
xaxis = list(title = "Year"),
yaxis = list (title = paste("PGR of ",place)))
p4
merged <- left_join(fert, imm, by="year")
ggplot(data = merged) +
geom_line(aes(x=year, y=fertility))+
geom_line(aes(x=year, y=immunization))
ggplot(full2, aes(x=y, y=p, colour=col)) +
theme_minimal()+
geom_bar(stat='identity', width=.5)  +
scale_fill_manual(name="Mileage",
labels = c("Above Average", "Below Average"),
values = c("above"="#00ba38", "below"="#f8766d")) +
labs(subtitle="Divergence from 0 of PGR",
title= "Population Growth Rate of Italy") +
coord_flip()+
ylab("Population Growth Rate value")+xlab("Year")+
theme(legend.position="none")+
theme(plot.title = element_text(size=30), axis.title.x = element_text(size=24),
plot.subtitle = element_text(size=24),
axis.title.y = element_text(size=26), axis.text=element_text(size=20),
legend.text=element_text(size=13), legend.title=element_text(size=14))
{
library(dplyr)
library(ggplot2)
library(rworldmap)
library(countrycode)
library(tidyr)
library(stringr)
library(plotly)
}
birth_rate <- read.csv("Datasets/birth_rate.csv", skip=4)
death_rate <- read.csv("Datasets/death_rate.csv", skip=4)
tot_pop <- read.csv("Datasets/total_population.csv", skip=4)
tot_pop2 <- read.csv("Datasets/pop_italy_earlyages.csv")
tot_pop2$pop = tot_pop2$pop*1000
dem_trans <- function(place) {
birth_rate <- birth_rate %>%
filter(Country.Name==place)
death_rate <- death_rate %>%
filter(Country.Name==place)
tot_pop <- tot_pop %>%
filter(Country.Name==place)
colnames(birth_rate) <- c("Country", "Country.Code", "Indicator.Name", "Indicator.Code", substring(colnames(birth_rate[,6:length(birth_rate)-1]), 2), "X")
colnames(death_rate) <- c("Country", "Country.Code", "Indicator.Name", "Indicator.Code", substring(colnames(death_rate[,6:length(death_rate)-1]), 2), "X")
colnames(tot_pop) <- c("Country", "Country.Code", "Indicator.Name", "Indicator.Code", substring(colnames(tot_pop[,6:length(tot_pop)-1]), 2), "X")
birth_rate[1:4] <- NULL; death_rate[1:4] <- NULL; tot_pop[1:4] <- NULL
birth <- gather(birth_rate, key="year", "births", 1:ncol(birth_rate))
death <- gather(death_rate, key="year", "deaths", 1:ncol(death_rate))
pop <- gather(tot_pop, key="year", "quantity", 1:ncol(tot_pop))
birth <- birth[-c(58,59),]
death <- death[-c(58,59),]
pop <- pop[-c(58,59),]
#pop$quantity <- pop$quantity/10000000
tmp <- left_join(birth, death, by="year")
return(left_join(tmp, pop, by="year"))
}
place <- "Italy"
full <- dem_trans(place)
p1 <- plot_ly(full, x = ~year, y = ~births, name = 'Births', type = 'scatter', mode = 'lines+markers',width = 1200, height = 400) %>%
add_trace(y = ~deaths, name = 'Deaths', mode = 'lines+markers') %>%
layout(title = "Demoghraphic Transition",
xaxis = list(title = "Year"),
yaxis = list (title = paste("Deaths/Births (per 1000 people) in ",place)))
p2 <- plot_ly(full, x = ~year, y = ~quantity, name = 'Population', type = 'scatter', mode = 'lines+markers',width = 1200, height = 400) %>%
layout(title = paste("Demoghraphic Transition of",place),
xaxis = list(title = "Year"),
yaxis = list (title = paste(place, "'s Total population"))#,
# shapes = list(list(type = "rect",
#            fillcolor = "blue", line = list(color = "blue"), opacity = 0.3,
#            x0 = "1980-01-01", x1 = "1985-01-01", xref = "x",
#            y0 = 4, y1 = 12.5, yref = "y"),
#       list(type = "rect",
#         fillcolor = "blue", line = list(color = "blue"), opacity = 0.2,
#         x0 = "2000-01-01", x1 = "2005-01-01", xref = "x",
#         y0 = 4, y1 = 12.5, yref = "y"))
)
ptrans <- subplot(p1, p2, shareX = TRUE, titleX = TRUE, titleY = TRUE, margin = c(0.02,0.02,1,1))
ptrans
p_pop <- plot_ly(tot_pop2, x = ~year, y = ~pop, name = 'population', type = 'scatter', mode = 'lines+markers',width = 900, height = 350) %>%
layout(title = "Population amount",
xaxis = list(title = "Year\n <a href='http://www.populstat.info/Europe/italyc.htm'>Source of the Data </a>"),
yaxis = list (title = paste("Total population of ",place)),
margin = c(0.02,0.02,0.02,0.02),
shapes = list(list(type = "rect",
fillcolor = "green", line = list(color = "green"), opacity = 0.5,
x0 = "1960", x1 = "2005", xref = "x",
y0 = 400, y1 = 60000000, yref = "y")) )
p_pop
full$year <- as.numeric(full$year)
full2 <- full %>%
select(q =quantity, y=year)%>%
mutate(p = ((q-lag(q))/(lag(q))))
ggplot(full2, aes(x=y, y=p))+geom_line()
p1 <- plot_ly(full2, x = ~y, y = ~p, name = 'PGR', type = 'scatter', mode = 'lines+markers') %>%
layout(title = "Demoghraphic Transition: PGR",
xaxis = list(title = "Year"),
yaxis = list (title = paste("PGR of ",place)))
p1
italy <- tot_pop %>%
filter(Country.Name==place)
colnames(italy) <- c("Country", "Country.Code", "Indicator.Name", "Indicator.Code", substring(colnames(italy[,6:length(italy)-1]), 2), "X")
italy[1:4] <- NULL
it <- gather(italy, key="year", "population", 1:ncol(italy))
it <- it[-c(58,59),]
it <-rbind(it, data.frame(year = c(2017), population=c(60551416)))
full2$col = ifelse(full2$p>0, "blue", "green")
ggplot(full2, aes(x=y, y=p, colour=col)) +
theme_minimal()+
geom_bar(stat='identity', width=.5)  +
scale_fill_manual(name="Mileage",
labels = c("Above Average", "Below Average"),
values = c("above"="#00ba38", "below"="#f8766d")) +
labs(subtitle="Divergence from 0 of PGR",
title= "Population Growth Rate of Italy") +
coord_flip()+
ylab("Population Growth Rate value")+xlab("Year")+
theme(legend.position="none")+
theme(plot.title = element_text(size=30), axis.title.x = element_text(size=24),
plot.subtitle = element_text(size=24),
axis.title.y = element_text(size=26), axis.text=element_text(size=20),
legend.text=element_text(size=13), legend.title=element_text(size=14))
f <- read.csv("Clean/fertility_clean.csv")
i <- read.csv("Clean/clean_immuniz.csv")
cleaning <- function(f, name){
f <- f %>%
filter(Country=="World") %>%
select(-X, -Area, -Country, -Country.Code, -Region, -Continent)
colnames(f) <- c( substring(colnames(f[,1:length(f)]), 2))
ff <- gather(f, key="year", name, 1:ncol(f))
ff$year <- as.numeric(ff$year)
return(ff)
}
fert <- cleaning(f, "fertility")
imm <- cleaning(i, "immuniz")
colnames(imm)[2] <- "immunization"
colnames(fert)[2] <- "fertility"
f1 <- list(
color = "lightgrey"
)
p4 <- plot_ly(fert, x = ~year, y = ~fertility, name = 'World Ferility Rate',
type = 'scatter', mode = 'lines+markers',
marker = list(
color = 'rgb(47,27, 255)',
size = 20,
opacity=0.7,
line = list(
color = 'rgb(21, 230, 180)',
width = 3
)
)) %>%
layout(title = "World Ferility Rate",
xaxis = list(title = "Year"),
yaxis = list (title = paste("PGR of ",place)))
p4
merged <- left_join(fert, imm, by="year")
ggplot(data = merged) +
geom_line(aes(x=year, y=fertility))+
geom_line(aes(x=year, y=immunization))
png(filename="/home/nicole/Data Science/exam_big_data/Images/pgn.png",width=800,height=800)
ggplot(full2, aes(x=y, y=p, colour=col)) +
theme_minimal()+
geom_bar(stat='identity', width=.5)  +
scale_fill_manual(name="Mileage",
labels = c("Above Average", "Below Average"),
values = c("above"="#00ba38", "below"="#f8766d")) +
labs(subtitle="Divergence from 0 of PGR",
title= "Population Growth Rate of Italy") +
coord_flip()+
ylab("Population Growth Rate value")+xlab("Year")+
theme(legend.position="none")+
theme(plot.title = element_text(size=30), axis.title.x = element_text(size=24),
plot.subtitle = element_text(size=24),
axis.title.y = element_text(size=26), axis.text=element_text(size=20),
legend.text=element_text(size=13), legend.title=element_text(size=14))
dev.off()
library(wordcloud)
install.packages("wordcloud")
library(wordcloud)
readline('p')
setwd('/home/nicole/Data Science/exam_big_data')
readline('p')
a<- read.delim("p.txt")
a
a%>%
count(word) %>%
with(wordcloud(word, n, max.words = 100))
library(dplyr)
setwd('/home/nicole/Data Science/exam_big_data')
a <- read.delim("p.txt")
a%>%
count(word) %>%
with(wordcloud(word, n, max.words = 100))
library(tidyr)
library(stringr)
library(tidytext)
data(stop_words)
a %>%
count(word) %>%
with(wordcloud(word, n, max.words = 100))
?nls
{
library(dplyr)
library(ggplot2)
library(tidyr)
library(dplyr)
library(readr)
library(plotly)
}
setwd('/home/nicole/Data Science/exam_big_data')
pop2 <- read_csv("Datasets/total_population.csv", skip=4)
fer <- read.csv("Datasets/fertility.csv", skip=4)
pop <- read.csv("Datasets/total_population.csv", skip=4)
{
w <- pop %>%
filter(Country.Name=="World")%>%
select(-Country.Name, -Country.Code, -Indicator.Name, -Indicator.Code, -X)
colnames(w) <- c(substring(colnames(w[,1:length(w)]), 2))
colnames(w)
w[2,]<- colnames(w)
w <- data.frame(t(w))
colnames(w) <- c("world_pop", "year")
w$world_pop <- as.numeric(as.character(w$world_pop))
w$year <- as.numeric(as.character(w$year))
}
newdata <- seq(2018,2100)
newdata <- data.frame(newdata)
colnames(newdata)[1] <- "year"
mod <- lm(world_pop ~ year, w)
lmod <- predict(mod, newdata)
newdata$lm <- data.frame(lmod)
mod <- nls(world_pop ~ SSlogis(year, phi1, phi2, phi3), data = w)
mod
?SSlogis
{
library(leaflet)
library(dplyr)
library(rgdal)
library(ggplot2)
library(geojsonio)
library(rworldmap)
library(countrycode)
library(htmlwidgets)
library(htmltools)
library(tidyr)
library(stringr)
}
setwd('/home/nicole/Data Science/exam_big_data/Clean')
population2 <- read.csv("population_clean.csv")
population <- read.csv("population_clean_with_NAs.csv")
density2 <- read.csv("density_clean.csv")
density <- read.csv("density_clean_with_NAs.csv")
population <- density
colnames(population)[2] <- "name"
{
levels(population$name) <- c(levels(population$name), "United States of America")
population$name[population$name == 'United States'] <- "United States of America"
levels(population$name) <- c(levels(population$name), "Russia")
population$name[population$name == 'Russian Federation'] <- "Russia"
levels(population$name) <- c(levels(population$name), "Democratic Republic of the Congo")
population$name[population$name == "Congo, Dem. Rep."] <- "Democratic Republic of the Congo"
levels(population$name) <- c(levels(population$name), "Iran")
population$name[population$name == "Iran, Islamic Rep."] <- "Iran"
levels(population$name) <- c(levels(population$name), "Republic of Serbia")
population$name[population$name == "Serbia"] <- "Republic of Serbia"
levels(population$name) <- c(levels(population$name), "Egypt")
population$name[population$name == "Egypt, Arab Rep."] <- "Egypt"
levels(population$name) <- c(levels(population$name), "Venezuela")
population$name[population$name == 'Venezuela, RB'] <- "Venezuela"
levels(population$name) <- c(levels(population$name), "United Republic of Tanzania")
population$name[population$name == "Tanzania"] <- "United Republic of Tanzania"
levels(population$name) <- c(levels(population$name), "Yemen")
population$name[population$name == 'Yemen, Rep.'] <- "Yemen"
levels(population$name) <- c(levels(population$name), "Ivory Coast")
population$name[population$name == "Cote d'Ivoire"] <- "Ivory Coast"
levels(population$name) <- c(levels(population$name), "Kyrgyzstan")
population$name[population$name == "Kyrgyz Republic"] <- "Kyrgyzstan"
levels(population$name) <- c(levels(population$name), "Syria")
population$name[population$name == "Syrian Arab Republic"] <- "Syria"
levels(population$name) <- c(levels(population$name), "Republic of the Congo")
population$name[population$name == "Congo, Rep."] <- "Republic of the Congo"
levels(population$name) <- c(levels(population$name), "Laos")
population$name[population$name == "Lao PDR"] <- "Laos"
levels(population$name) <- c(levels(population$name), "Slovakia")
population$name[population$name == "Slovak Republic"] <- "Slovakia"
levels(population$name) <- c(levels(population$name), "Macedonia")
population$name[population$name == "Macedonia, FYR"] <- "Macedonia"
levels(population$name) <- c(levels(population$name), "Guinea Bissau")
population$name[population$name == "Guinea-Bissau"] <- "Guinea Bissau"
levels(population$name) <- c(levels(population$name), "South Korea")
population$name[population$name == "Korea, Rep."] <- "South Korea"
levels(population$name) <- c(levels(population$name), "North Korea")
population$name[population$name == "Korea, Dem. People’s Rep."] <- "North Korea"
}
setwd('/home/nicole/Data Science/exam_big_data')
states <- geojsonio::geojson_read("prova.geo.json", what = "sp")
class(states)
prova <- merge(states, population, by="name")
m <- leaflet(prova) %>%
setView(-1, 42, zoom=2) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
bins <- c(0, 10, 20, 50, 100, 200, 300, 400, 500, 1000, Inf)
pal <- colorBin("YlOrRd", domain = states$density, bins = bins)
labels <- sprintf(
"<strong>%s</strong><br/>%g people / m<sup>2</sup>",
prova$name, prova$Density2017
) %>% lapply(htmltools::HTML)
m <- m %>% addPolygons(
fillColor = ~pal(Density2017),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
m
bins <- c(0, 10, 20, 50, 100, 200, 400, 500, 1000, Inf)
pal <- colorBin("YlOrRd", domain = states$density, bins = bins)
labels <- sprintf(
"<strong>%s</strong><br/>%g people / m<sup>2</sup>",
prova$name, prova$Density2017
) %>% lapply(htmltools::HTML)
m <- m %>% addPolygons(
fillColor = ~pal(Density2017),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
m
setwd('/home/nicole/Data Science/exam_big_data')
saveWidget(m, 'map.html', selfcontained = TRUE)
