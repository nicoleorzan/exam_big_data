mutate(Country=replace(Country, Country=="Netherlands Antilles ", "Netherlands Antilles"))
countries_world$Country.Code <-
countrycode(countries_world$Country, origin='country.name',
destination='iso3c')
countries_world <- countries_world %>%
mutate(Country.Code=replace(Country.Code, Country=="Netherlands Antilles", "NA")) %>%
mutate(Country.Code=replace(Country.Code, Country=="Virgin Islands ", "VI")) %>%
select(Country.Code, everything())
}
###======
#### taking piece of countries_world dataset
#### to deal with other datasets
country_region <- data.frame(Country.Code=countries_world$Country.Code,
Country=countries_world$Country,
Region=countries_world$Region,
Area=countries_world$Area)
country_region$Country.Code <- as.character(country_region$Country.Code)
#######==== Dropping columns and rows which ONLY ======########
#######==== CONTAIN NA's; adding Region and Continent ======########
na_region_continent <- function(x, country_region){
colnames(x) <- c("Country", "Country.Code", "Indicator.Name", "Indicator.Code", substring(colnames(x[,6:length(x)-1]), 2), "X")
# eliminate NA
x <- x %>% select_if(~sum(!is.na(.)) > 0)
years <- x[,5:ncol(x)] %>%
filter_all(any_vars(!is.na(.)))
x <- semi_join(x, years, by=c("2014", "2015", "2016")) %>%
select(-Indicator.Name, -Indicator.Code)
# Add region
x$Country.Code <- as.character(x$Country.Code)
x <- left_join(x, country_region, "Country.Code") %>%
select(Region, everything()) %>%
select(-Country.y) %>%
rename(Country = Country.x)
# Add continent
x <<- x %>%
mutate(Continent = ifelse(Region=="NORTHERN AMERICA" | Region=="LATIN AMER. & CARIB", "America", ifelse(Region=="NORTHERN AFRICA" | Region=="SUB-SAHARAN AFRICA", "Africa", ifelse(Region=="BALTICS" | Region=="WESTERN EUROPE" | Region=="EASTERN EUROPE" | Region=="C.W. OF IND. STATES", "Europe", ifelse(Region=="NEAR EAST" | Region=="ASIA (EX. NEAR EAST)", "Asia", "Oceania"))))) %>%
select(Country, Continent, everything())
}
{datas <- vector(mode="list", length=5)
names(datas) <- c("immunization", "death", "Gdp", "total_population", "fert")
datas[[1]] <- immunization; datas[[2]] <- death
datas[[3]] <- Gdp; datas[[4]] <- total_population
datas[[5]] <- fert
for (i in (1:length(datas))){
print(i);  print(names(datas)[i])
tmp_data <- mget(names(datas)[i])
sapply(tmp_data, na_region_continent, country_region=country_region)
datas[[i]] <- x
}
immunization <- datas[[1]]; death <- datas[[2]]
Gdp <- datas[[3]]; total_population <- datas[[4]]
fert <- datas[[5]]
}
# cleaning additive data
total_population <- total_population %>%
mutate(Continent=replace(Continent, Country=="Kosovo", "Europe")) %>%
mutate(Continent=replace(Continent, Country=="Virgin Islands (U.S.)", "America"))%>%
mutate(Continent=replace(Continent, Country=="Vanuatu", "Oceania"))%>%
mutate(Continent=replace(Continent, Country=="South Sudan", "Africa"))%>%
mutate(Continent=replace(Continent, Country=="Montenegro", "Europe"))%>%
mutate(Continent=replace(Continent, Country=="Sint Maarten (Dutch part)", "America"))%>%
mutate(Continent=replace(Continent, Country=="Pacific island small states", "Asia"))%>%
mutate(Continent=replace(Continent, Country=="St. Martin (French part)", "America"))%>%
mutate(Continent=replace(Continent, Country=="Caribbean small states", "America"))%>%
mutate(Continent=replace(Continent, Country=="Curacao", "America"))%>%
mutate(Continent=replace(Continent, Country=="Channel Islands", "America"))
##### END DATA CLEANING #######
}
{
countries_world <- read.csv("Datasets/countries of the world.csv", na.strings=c("","NA"))
colnames(countries_world)[4]="Area"
colnames(countries_world)[5]="Density"
countries_world[,2] <- str_trim(countries_world[,2], "both")
immunization <- read.csv("Datasets/immunization.csv", skip=4)
fert <- read.csv("Datasets/fertility.csv", skip=4)
death <- read.csv("Datasets/death_rate.csv", skip=4)
Gdp <- read.csv("Datasets/GDP_annual_growth.csv", skip=4)
total_population <- read.csv("Datasets/total_population.csv", skip=4)
}
{ ##### START DATA CLEANING #######
###====== Adding country code to world countries
###====== using countrycode package !!!
{
countries_world$Country <- as.character(countries_world$Country)
countries_world <- countries_world %>%
mutate(Country=replace(Country, Country=="Central African Rep. ", "Central African Republic")) %>%
mutate(Country=replace(Country, Country=="Netherlands Antilles ", "Netherlands Antilles"))
countries_world$Country.Code <-
countrycode(countries_world$Country, origin='country.name',
destination='iso3c')
countries_world <- countries_world %>%
mutate(Country.Code=replace(Country.Code, Country=="Netherlands Antilles", "NA")) %>%
mutate(Country.Code=replace(Country.Code, Country=="Virgin Islands ", "VI")) %>%
select(Country.Code, everything())
}
###======
#### taking piece of countries_world dataset
#### to deal with other datasets
country_region <- data.frame(Country.Code=countries_world$Country.Code,
Country=countries_world$Country,
Region=countries_world$Region,
Area=countries_world$Area)
country_region$Country.Code <- as.character(country_region$Country.Code)
#######==== Dropping columns and rows which ONLY ======########
#######==== CONTAIN NA's; adding Region and Continent ======########
na_region_continent <- function(x, country_region){
colnames(x) <- c("Country", "Country.Code", "Indicator.Name", "Indicator.Code", substring(colnames(x[,6:length(x)-1]), 2), "X")
# eliminate NA
x <- x %>% select_if(~sum(!is.na(.)) > 0)
years <- x[,5:ncol(x)] %>%
filter_all(any_vars(!is.na(.)))
x <- semi_join(x, years, by=c("2014", "2015", "2016")) %>%
select(-Indicator.Name, -Indicator.Code)
# Add region
x$Country.Code <- as.character(x$Country.Code)
x <- left_join(x, country_region, "Country.Code") %>%
select(Region, everything()) %>%
select(-Country.y) %>%
rename(Country = Country.x)
# Add continent
x <<- x %>%
mutate(Continent = ifelse(Region=="NORTHERN AMERICA" | Region=="LATIN AMER. & CARIB", "America", ifelse(Region=="NORTHERN AFRICA" | Region=="SUB-SAHARAN AFRICA", "Africa", ifelse(Region=="BALTICS" | Region=="WESTERN EUROPE" | Region=="EASTERN EUROPE" | Region=="C.W. OF IND. STATES", "Europe", ifelse(Region=="NEAR EAST" | Region=="ASIA (EX. NEAR EAST)", "Asia", "Oceania"))))) %>%
select(Country, Continent, everything())
}
{datas <- vector(mode="list", length=5)
names(datas) <- c("immunization", "death", "Gdp", "total_population", "fert")
datas[[1]] <- immunization; datas[[2]] <- death
datas[[3]] <- Gdp; datas[[4]] <- total_population
datas[[5]] <- fert
for (i in (1:length(datas))){
print(i);  print(names(datas)[i])
tmp_data <- mget(names(datas)[i])
sapply(tmp_data, na_region_continent, country_region=country_region)
datas[[i]] <- x
}
immunization <- datas[[1]]; death <- datas[[2]]
Gdp <- datas[[3]]; total_population <- datas[[4]]
fert <- datas[[5]]
}
# cleaning additive data
total_population <- total_population %>%
mutate(Continent=replace(Continent, Country=="Kosovo", "Europe")) %>%
mutate(Continent=replace(Continent, Country=="Virgin Islands (U.S.)", "America"))%>%
mutate(Continent=replace(Continent, Country=="Vanuatu", "Oceania"))%>%
mutate(Continent=replace(Continent, Country=="South Sudan", "Africa"))%>%
mutate(Continent=replace(Continent, Country=="Montenegro", "Europe"))%>%
mutate(Continent=replace(Continent, Country=="Sint Maarten (Dutch part)", "America"))%>%
mutate(Continent=replace(Continent, Country=="Pacific island small states", "Asia"))%>%
mutate(Continent=replace(Continent, Country=="St. Martin (French part)", "America"))%>%
mutate(Continent=replace(Continent, Country=="Caribbean small states", "America"))%>%
mutate(Continent=replace(Continent, Country=="Curacao", "America"))%>%
mutate(Continent=replace(Continent, Country=="Channel Islands", "America"))
} ##### END DATA CLEANING #######
total_population %>%
select(Country, Continent, `1960`) %>%
na.omit()  %>%
summarize(sum(`1960`))
na_pop <- total_population %>%
select(Country, Continent, `1960`) %>%
filter(is.na(Continent))#%>%
total_population %>%
select(Country, Continent, `1960`) %>%
filter(Country=="World")
countries_world <- countries_world %>%
mutate(Continent = ifelse(Region=="NORTHERN AMERICA" | Region=="LATIN AMER. & CARIB", "America", ifelse(Region=="NORTHERN AFRICA" | Region=="SUB-SAHARAN AFRICA", "Africa", ifelse(Region=="BALTICS" | Region=="WESTERN EUROPE" | Region=="EASTERN EUROPE" | Region=="C.W. OF IND. STATES", "Europe", ifelse(Region=="NEAR EAST" | Region=="ASIA (EX. NEAR EAST)", "Asia", "Oceania"))))) %>%
select(Country, Continent, everything())
countries_world %>%
group_by(Region) %>%
count() %>%
arrange(n)
source('~/Data Science/exam_big_data/world.R')
{library(shiny)
library(shinythemes)
library(ggplot2)
library(tools)
library(DT)
library(dplyr)
library(shinydashboard)
library(stringr)
}
density <- read.csv("Clean/density_clean.csv")
population <- read.csv("Clean/population_clean.csv")
pop_per_continent <- read.csv("Clean/pop_per_continent.csv")
growth <- read.csv("Clean/growth_clean.csv")
ui <- fluidPage(theme = shinytheme("cerulean"),
titlePanel("World Population Study, 1960 - 2017"),
# Sidebar layout with a input and output definitions
sidebarLayout(
# Inputs
sidebarPanel(
wellPanel(
h3("Plot 1"),
selectInput(inputId = "x", label = "X-axis:",
choices = c("year"),
selected = "year"),
selectInput(inputId = "y", label = "Y-axis:",
choices = c("WorldPopulation","percentage_growth"),
selected = "WorldPopulation"),
selectInput(inputId = "z",label = "Color by:",
choices = c("percentage_growth"),
selected = "percentage_growth")
),
wellPanel(
h3("Plot 2"),
# Select variable for x-axis
selectInput(inputId = "x2", label = "x-axis: Population",
choices = c("1960" = "X1960",
"1970" = "X1970",
"1980" = "X1980",
"1990" = "X1990",
"2000" = "X2000",
"2010" = "X2010",
"2017" = "X2017"),
selected = "1960"),
selectInput(inputId = "y2", label = "Y-axis: Area",
choices = c("Area", "logArea"),
selected = "Area"),
selectInput(inputId = "z2",label = "Color by:",
choices = c("Continent", "Region"),
selected = "Continent"),
textInput(inputId = "plot_title",
label = "Plot title",
placeholder = "Enter text for plot title")
#hr(),                # Horizontal line for visual separation
),
wellPanel(
h3("Subsetting"),
checkboxGroupInput(inputId = "selected_continent",
label = "Select Continent:",
choices = c("Europe", "Africa", "Asia", "Oceania", "America"),
selected = c("Europe", "Africa", "Asia", "Oceania", "America"))
),
#br(), br(),
h5("Built with",
img(src = "http://www.worldbank.org/content/dam/wbr/logo/logo-wb-header-en.svg", height = "30px") )
),
# Outputs
mainPanel(
#plotOutput(outputId = "scatterplot"),
#plotOutput(outputId = "scatterplot2"),
#textOutput(outputId = "description")
tabsetPanel(type = "tabs",
# Tab 1: Plot
tabPanel(title = "Plot 1",
plotOutput(outputId = "scatterplot")
),
# Tab 2: Data
tabPanel(title = "Plot 2",
br(),
plotOutput(outputId = "scatterplot2"),
h5(textOutput("description"))
)
)
)
)
)
server <- function(input, output) {
# Create a subset of data filtering for selected title types
population_subset <- reactive({
req(input$selected_continent)
filter(population, Continent %in% input$selected_continent)
})
# Convert plot_title toTitleCase
pretty_plot_title <- reactive({ toTitleCase(input$plot_title) })
# Create the scatterplot object the plotOutput function is expecting
output$scatterplot <- renderPlot({
ggplot(growth, aes_string(x = input$x, y = input$y, color = input$z)) +  geom_point()
})
output$scatterplot2 <- renderPlot({
ggplot(population_subset(), aes_string(x = input$x2, y = input$y2, color = input$z2)) +
geom_point()
})
# Create descriptive text
output$description <- renderText({
paste0("The plot above titled '", pretty_plot_title(), "' visualizes the relationship between ",
input$x2, " and ", input$y2, ", conditional on ", input$z2, ".")
})
}
shinyApp(ui = ui, server = server)
fer <- read_csv("Datasets/fertility_clean.csv", skip=4)
{
library(dplyr)
library(ggplot2)
library(tidyr)
library(dplyr)
library(readr)
library(plotly)
}
setwd('/home/nicole/Data Science/exam_big_data')
pop <- read.csv("Datasets/total_population.csv", skip=4, stringsAsFactors = FALSE)
pop2 <- read_csv("Datasets/total_population.csv", skip=4)
fer <- read.csv("Datasets/fertility_clean.csv", skip=4)
fer <- read.csv("Datasets/fertility.csv", skip=4)
pop <- read.csv("Datasets/total_population.csv", skip=4, stringsAsFactors = FALSE)
pop2 <- read_csv("Datasets/total_population.csv", skip=4)
fer <- read.csv("Datasets/fertility.csv", skip=4)
{
w <- pop %>%
#filter(`Country Name`=="World")%>%
#select(-`Country Name`, -`Country Code`, -`Indicator Name`, -`Indicator Code`, -X63)
filter(Country.Name=="World")%>%
select(-Country.Name, -Country.Code, -Indicator.Name, -Indicator.Code, -X)
colnames(w) <- c(substring(colnames(w[,1:length(w)]), 2))
colnames(w)
w[2,]<- colnames(w)
w <- data.frame(t(w))
colnames(w) <- c("world_pop", "year")
w$world_pop <- as.numeric(as.character(w$world_pop))
w$year <- as.numeric(as.character(w$year))
}
View(w)
View(fer)
f <- fert %>%
filter(Country=="World")
View(f)
f <- fert %>%
filter(Country=="World")%>%
select(-Country.Name, -Country.Code, -Indicator.Name, -Indicator.Code, -X)
fer <- read.csv("Datasets/fertility.csv", skip=4)
f <- fert %>%
filter(Country=="World")%>%
select(-Country.Name, -Country.Code, -Indicator.Name, -Indicator.Code, -X)
f <- fer %>%
filter(Country=="World")%>%
select(-Country.Name, -Country.Code, -Indicator.Name, -Indicator.Code, -X)
f <- fer %>%
filter(Country.Name=="World")%>%
select(-Country.Name, -Country.Code, -Indicator.Name, -Indicator.Code, -X)
w <- pop %>%
#filter(`Country Name`=="World")%>%
#select(-`Country Name`, -`Country Code`, -`Indicator Name`, -`Indicator Code`, -X63)
filter(Country.Name=="World")%>%
select(-Country.Name, -Country.Code, -Indicator.Name, -Indicator.Code, -X)
colnames(w) <- c(substring(colnames(w[,1:length(w)]), 2))
colnames(w)
clean <- function(ds){
a <- ds %>%
#filter(`Country Name`=="World")%>%
#select(-`Country Name`, -`Country Code`, -`Indicator Name`, -`Indicator Code`, -X63)
filter(Country.Name=="World")%>%
select(-Country.Name, -Country.Code, -Indicator.Name, -Indicator.Code, -X)
colnames(a) <- c(substring(colnames(w[,1:length(a)]), 2))
return(a)
}
f <- clean(fer)
clean <- function(ds){
a <- ds %>%
#filter(`Country Name`=="World")%>%
#select(-`Country Name`, -`Country Code`, -`Indicator Name`, -`Indicator Code`, -X63)
filter(Country.Name=="World")%>%
select(-Country.Name, -Country.Code, -Indicator.Name, -Indicator.Code, -X)
colnames(a) <- c(substring(colnames(a[,1:length(a)]), 2))
return(a)
}
f <- clean(fer)
w <- clean(pop)
w[2,]<- colnames(w)
w <- data.frame(t(w))
colnames(w) <- c("world_pop", "year")
w$world_pop <- as.numeric(as.character(w$world_pop))
w$year <- as.numeric(as.character(w$year))
w$fert <- as.numeric(as.character(f[1,]))
nrow(f)
ncol(f)
nrow(w)
p <- fert%>%filter(Country.Name=="World")
p <- fer%>%filter(Country.Name=="World")
View(p)
pop <- read.csv("Datasets/total_population.csv", skip=4, stringsAsFactors = FALSE)
pop2 <- read_csv("Datasets/total_population.csv", skip=4)
fer <- read.csv("Datasets/fertility.csv", skip=4)
{
clean <- function(ds){
a <- ds %>%
#filter(`Country Name`=="World")%>%
#select(-`Country Name`, -`Country Code`, -`Indicator Name`, -`Indicator Code`, -X63)
filter(Country.Name=="World")%>%
select(-Country.Name, -Country.Code, -Indicator.Name, -Indicator.Code, -X)
colnames(a) <- c(substring(colnames(a[,1:length(a)]), 2))
return(a)
}
#   w <- pop %>%
#   #filter(`Country Name`=="World")%>%
#   #select(-`Country Name`, -`Country Code`, -`Indicator Name`, -`Indicator Code`, -X63)
#   filter(Country.Name=="World")%>%
#   select(-Country.Name, -Country.Code, -Indicator.Name, -Indicator.Code, -X)
# colnames(w) <- c(substring(colnames(w[,1:length(w)]), 2))
# colnames(w)
w <- clean(pop)
f <- clean(fer)
w[2,]<- colnames(w)
w <- data.frame(t(w))
colnames(w) <- c("world_pop", "year")
w$world_pop <- as.numeric(as.character(w$world_pop))
w$year <- as.numeric(as.character(w$year))
w$fert <- as.numeric(as.character(f[1,]))
}
newdata <- seq(2018,2100)
newdata <- data.frame(newdata)
View(w)
w[59, ]<- NULL
w <- w[-59]
w <- w[-59]
nrow(w)
ncol(f)
View(f)
f$`2017` <- NULL
f$`2018` <- NULL
w <- w[-58]
nrow(w)
w <- w[-58,]
w$fert <- as.numeric(as.character(f[1,]))
newdata <- seq(2017,2100)
newdata <- data.frame(newdata)
colnames(newdata)[1] <- "year"
mod <- lm(world_pop ~ year, w)
lmod <- predict(mod, newdata)
newdata$lm <- data.frame(lmod)
mod <- nls(world_pop ~ SSlogis(year, fert, phi1, phi2, phi3), data = w)
mod <- nls(world_pop ~ SSlogis(year,, phi1, phi2, phi3), data = w)
mod <- nls(world_pop ~ SSlogis(year, phi1, phi2, phi3), data = w)
?nls
mod <- nls(world_pop ~ SSlogis(year+fert, phi1, phi2, phi3), data = w)
pred <- predict(mod, newdata)
vv <- data.frame(pred)
newdata$world_pop <- data.frame(pred[1:83])
newdata <- newdata %>%
select(world_pop, year, lm)
newdata$world_pop <- as.numeric(unlist(newdata$world_pop))
newdata$lm <- as.numeric(unlist(newdata$lm))
w$lm <- w$world_pop
tot <- rbind(w, newdata)
p1 <- plot_ly(tot, x = ~year, y = ~world_pop, name = 'Logistic model', type = 'scatter', mode = 'lines+markers') %>%
add_trace(y = ~lm, name = 'Lineaar model', mode = 'lines+markers') %>%
layout(title = "Predicted trend of world population growth until 2100",
xaxis = list(title = "Year"),
yaxis = list (title = paste("Pop quantity")))
p1
pred <- predict(mod, newdata)
mod <- nls(world_pop ~ SSlogis(year, phi1, phi2, phi3), data = w)
pred <- predict(mod, newdata)
vv <- data.frame(pred)
newdata$world_pop <- data.frame(pred[1:83])
newdata <- newdata %>%
select(world_pop, year, lm)
newdata$world_pop <- as.numeric(unlist(newdata$world_pop))
newdata$lm <- as.numeric(unlist(newdata$lm))
w$lm <- w$world_pop
tot <- rbind(w, newdata)
p1 <- plot_ly(tot, x = ~year, y = ~world_pop, name = 'Logistic model', type = 'scatter', mode = 'lines+markers') %>%
add_trace(y = ~lm, name = 'Lineaar model', mode = 'lines+markers') %>%
layout(title = "Predicted trend of world population growth until 2100",
xaxis = list(title = "Year"),
yaxis = list (title = paste("Pop quantity")))
p1
pred <- predict(mod, newdata)
vv <- data.frame(pred)
newdata$world_pop <- data.frame(pred[1:82])
newdata$world_pop <- data.frame(pred[1:83])
newdata$world_pop <- data.frame(pred[1:84])
newdata <- newdata %>%
select(world_pop, year, lm)
newdata$world_pop <- as.numeric(unlist(newdata$world_pop))
newdata$lm <- as.numeric(unlist(newdata$lm))
w$lm <- w$world_pop
tot <- rbind(w, newdata)
p1 <- plot_ly(tot, x = ~year, y = ~world_pop, name = 'Logistic model', type = 'scatter', mode = 'lines+markers') %>%
add_trace(y = ~lm, name = 'Lineaar model', mode = 'lines+markers') %>%
layout(title = "Predicted trend of world population growth until 2100",
xaxis = list(title = "Year"),
yaxis = list (title = paste("Pop quantity")))
p1
w <- clean(pop)
f <- clean(fer)
w[2,]<- colnames(w)
w <- data.frame(t(w))
colnames(w) <- c("world_pop", "year")
w$world_pop <- as.numeric(as.character(w$world_pop))
w$year <- as.numeric(as.character(w$year))
w <- w[-59]
}
newdata <- seq(2018,2100)
newdata <- data.frame(newdata)
colnames(newdata)[1] <- "year"
mod <- lm(world_pop ~ year, w)
lmod <- predict(mod, newdata)
newdata$lm <- data.frame(lmod)
mod <- nls(world_pop ~ SSlogis(year, phi1, phi2, phi3), data = w)
pred <- predict(mod, newdata)
vv <- data.frame(pred)
newdata$world_pop <- data.frame(pred[1:83])
newdata <- newdata %>%
select(world_pop, year, lm)
newdata$world_pop <- as.numeric(unlist(newdata$world_pop))
newdata$lm <- as.numeric(unlist(newdata$lm))
w$lm <- w$world_pop
tot <- rbind(w, newdata)
p1 <- plot_ly(tot, x = ~year, y = ~world_pop, name = 'Logistic model', type = 'scatter', mode = 'lines+markers') %>%
add_trace(y = ~lm, name = 'Lineaar model', mode = 'lines+markers') %>%
layout(title = "Predicted trend of world population growth until 2100",
xaxis = list(title = "Year"),
yaxis = list (title = paste("Pop quantity")))
p1
{library(shiny)
library(shinythemes)
library(ggplot2)
#library(tools)
#library(DT)
library(dplyr)
library(shinydashboard)
#library(stringr)
}
