tp <- rep(0, length(l))
fp <- rep(0, length(l))
f1_vect <- matrix(0,ncol=9,nrow=length(l))
thmin_fcustom <- 1
fcust <- 100
resp_sel <- 0
f1_temp <- 0
for (i in 1:length(l)){
resp <-ifelse(pred>l[i], 1, 0)
mat <- caret::confusionMatrix(factor(Y.Test_under, levels=0:1), factor(resp, levels=0:1), positive="1")
tp[i] <- mat$table[1,1]/(mat$table[2,1]+mat$table[1,1])
fp[i] <- mat$table[1,2]/(mat$table[1,2]+mat$table[2,2])
f1_temp <- mat$byClass["F1"]
f1_vect[i,1]=l[i]
f1_vect[i,2] <- f1_temp
f1_vect[i,3] <- mat$byClass["Precision"]
f1_vect[i,4] <- mat$byClass["Recall"]
prec <- mat$byClass["Precision"]
recall <- mat$byClass["Recall"]
f1_vect[i,5] <- 5*(prec+recall)/(4*prec+recall)
f1_vect[i,6] <- 1.025*(prec+recall)/(0.025*prec+recall)
f1_vect[i,7] <- mat$table[1,2]# /(mat$table[1,2]+mat$table[2,2]) # false_positive_rate
f1_vect[i,8] <- mat$table[2,1]# /(mat$table[1,1]+mat$table[2,1]) # false_neg_rate
f1_vect[i,9] <- (2*mat$table[1,2]+mat$table[2,1])/nrow(pred)
if (!is.na(f1_vect[i,9]) && f1_vect[i,9] < fcust) {
thmin_fcustom <- i
fcust <- f1_vect[i,9]
resp_sel <- ifelse(pred>l[i], 1, 0)
mat_sel <- mat
}
}
print("end custom cost function")
return(list(f1_vect=f1_vect, th_min=l[thmin_fcustom], pred=resp_sel, confusionMat=mat_sel, tp=tp, fp=fp))
}
install.packages("keras")
{
library(dplyr)
library(ggplot2)
#library(rworldmap)
library(countrycode)
library(tidyr)
library(stringr)
library(igraph)
library(ggraph)
}
setwd('/home/nicole/Data Science/exam_big_data')
{countries_world <- read.csv("Datasets/countries of the world.csv", na.strings=c("","NA"))
colnames(countries_world)[4]="Area"
colnames(countries_world)[5]="Density"
countries_world[,2] <- str_trim(countries_world[,2], "both")
immunization <- read.csv("Datasets/immunization.csv", skip=4)
death <- read.csv("Datasets/death_rate.csv", skip=4)
Gdp <- read.csv("Datasets/GDP_annual_growth.csv", skip=4)
total_population <- read.csv("Datasets/total_population.csv", skip=4)
}
{
countries_world$Country <- as.character(countries_world$Country)
countries_world <- countries_world %>%
mutate(Country=replace(Country, Country=="Central African Rep. ", "Central African Republic")) %>%
mutate(Country=replace(Country, Country=="Netherlands Antilles ", "Netherlands Antilles"))
countries_world$Country.Code <-
countrycode(countries_world$Country, origin='country.name',
destination='iso3c')
countries_world <- countries_world %>%
mutate(Country.Code=replace(Country.Code, Country=="Netherlands Antilles", "NA")) %>%
mutate(Country.Code=replace(Country.Code, Country=="Virgin Islands ", "VI")) %>%
select(Country.Code, everything())
}
country_region <- data.frame(Country.Code=countries_world$Country.Code,
Country=countries_world$Country,
Region=countries_world$Region,
Area=countries_world$Area)
country_region$Country.Code <- as.character(country_region$Country.Code)
na_reg <- function(x, country_region){
colnames(x) <- c("Country", "Country.Code", "Indicator.Name", "Indicator.Code", substring(colnames(x[,6:length(x)-1]), 2), "X")
# eliminate NA
x <- x %>% select_if(~sum(!is.na(.)) > 0)
years <- x[,5:ncol(x)] %>%
filter_all(any_vars(!is.na(.)))
x <- semi_join(x, years, by=c("2014", "2015", "2016")) %>%
select(-Indicator.Name, -Indicator.Code)
# Add region
x$Country.Code <- as.character(x$Country.Code)
x <- left_join(x, country_region, "Country.Code") %>%
select(Region, everything()) %>%
select(-Country.y) %>%
rename(Country = Country.x)
# Add continent
x <<- x %>%
mutate(Continent = ifelse(Region=="NORTHERN AMERICA" | Region=="LATIN AMER. & CARIB", "America", ifelse(Region=="NORTHERN AFRICA" | Region=="SUB-SAHARAN AFRICA", "Africa", ifelse(Region=="BALTICS" | Region=="WESTERN EUROPE" | Region=="EASTERN EUROPE" | Region=="C.W. OF IND. STATES", "Europe", ifelse(Region=="NEAR EAST" | Region=="ASIA (EX. NEAR EAST)", "Asia", "Oceania"))))) %>%
select(Country, Continent, everything())
}
{datas <- vector(mode="list", length=4)
names(datas) <- c("immunization", "death", "Gdp", "total_population")
datas[[1]] <- immunization; datas[[2]] <- death
datas[[3]] <- Gdp; datas[[4]] <- total_population
for (i in (1:length(datas))){
print(i);  print(names(datas)[i])
tmp_data <- mget(names(datas)[i])
sapply(tmp_data, na_reg, country_region=country_region)
datas[[i]] <- x
}
immunization <- datas[[1]]; death <- datas[[2]]
Gdp <- datas[[3]]; total_population <- datas[[4]]}
total_population <-total_population %>%
mutate(Continent=replace(Continent, Country=="Kosovo", "Europe")) %>%
mutate(Continent=replace(Continent, Country=="Virgin Islands (U.S.)", "America"))%>%
mutate(Continent=replace(Continent, Country=="Vanuatu", "Oceania"))%>%
mutate(Continent=replace(Continent, Country=="South Sudan", "Africa"))%>%
mutate(Continent=replace(Continent, Country=="Montenegro", "Europe"))%>%
mutate(Continent=replace(Continent, Country=="Sint Maarten (Dutch part)", "America"))%>%
mutate(Continent=replace(Continent, Country=="Pacific island small states", "Asia"))%>%
mutate(Continent=replace(Continent, Country=="St. Martin (French part)", "America"))%>%
mutate(Continent=replace(Continent, Country=="Caribbean small states", "America"))%>%
mutate(Continent=replace(Continent, Country=="Curacao", "America"))%>%
mutate(Continent=replace(Continent, Country=="Channel Islands", "America"))
total_population %>%
select(Country, Continent, `2017`) %>%
na.omit()  %>%
summarize(sum(`2017`))
total_population %>%
select(Country, Continent, `2017`) %>%
filter(is.na(Continent)) %>%
filter(`2017`>10000000 & `2017`<20000000)
{
DensityValues <- as.double(gsub(",","",as.character(countries_world$Density),fixed=TRUE))
countries_world$DensityValues <- DensityValues
countries_world$StepDensity <- as.integer(rep(0, nrow(countries_world)))
densitystep <- c(10, 25, 50, 60, 75, 100, 300, 500, 1000, 3000)
densitystep <- as.integer(densitystep)
for (i in 1:10){
val <- countries_world$DensityValues>densitystep[i]
countries_world$StepDensity[val]=i
}
}
worldpop <- total_population %>%
filter(Country=="World")
growth <- gather(worldpop, "year", "WorldPopulation", 5:ncol(worldpop)) %>%
select(-Continent, -Region, -Country.Code) %>%
filter(year != "X1960") %>%
mutate(percentage_growth = (WorldPopulation-lag(WorldPopulation))/lag(WorldPopulation)*100) %>%
select(-Country)
write.csv(file="Clean/growth_clean.csv", x=growth)
nrow(growth)
total_population <- total_population %>%
na.omit() %>%
mutate(logArea = log(Area))
population_density <- total_population %>%
mutate(Density1960=`1960`/Area) %>%
mutate(Density1970=`1970`/Area) %>%
mutate(Density1980=`1980`/Area) %>%
mutate(Density1990=`1990`/Area) %>%
mutate(Density2000=`2000`/Area) %>%
mutate(Density2010=`2010`/Area) %>%
mutate(Density2017=`2017`/Area) %>%
select(Country, Continent, Region, Country.Code,  Density1960:Density2017, Area, logArea)
nrow(total_population)
nrow(population_density)
write.csv(file="Clean/density_clean.csv", x=population_density)
write.csv(file="Clean/population_clean.csv", x=total_population)
{
pop_per_continent <- total_population[2:ncol(total_population)]%>%
select(Continent, everything(), -Region, -Country.Code, -Area, -logArea)
pop_per_continent %>%
group_by(Continent)%>%
na.omit()%>%
summarize(sum(`1960`))
pop_per_continent <- pop_per_continent %>%
na.omit() %>%
group_by(Continent) %>%
mutate_at(vars(`1960`:`2017`), sum) %>%
unique()
}
write.csv(file="Clean/pop_per_continent.csv", x=pop_per_continent)
write.csv(file="Clean/clean_immuniz.csv", x=immunization)
write.csv(file="Clean/clean_death.csv", x=death)
gro <- growth[2:nrow(growth)-1,]
g <- graph_from_data_frame(gro, directed = FALSE)
V(g)$id <- seq(1, vcount(g))
E(g)$weight
graph(gro, layout = "with_kk")+
geom_edge_link(aes(alpha = weight))+
geom_node_point()
gro <- growth[2:nrow(growth)-1,]
g <- graph_from_data_frame(gro, directed = FALSE)
V(g)$id <- seq(1, vcount(g))
E(g)$weight
graph(gro, layout = "with_kk")+
geom_edge_link(aes(alpha = weight))+
geom_node_point()
library(shiny)
library(shinythemes)
library(ggplot2)
library(tools)
library(DT)
library(dplyr)
library(shinydashboard)
library(stringr)
density <- read.csv("Clean/density_clean.csv")
population <- read.csv("Clean/population_clean.csv")
pop_per_continent <- read.csv("Clean/pop_per_continent.csv")
growth <- read.csv("Clean/growth_clean.csv")
ui <- fluidPage(theme = shinytheme("cerulean"),
titlePanel("World Population Study, 1960 - 2017"),
# Sidebar layout with a input and output definitions
sidebarLayout(
# Inputs
sidebarPanel(
wellPanel(
h3("Plot 1"),
selectInput(inputId = "x", label = "X-axis:",
choices = c("year"),
selected = "year"),
selectInput(inputId = "y", label = "Y-axis:",
choices = c("WorldPopulation","percentage_growth"),
selected = "WorldPopulation"),
selectInput(inputId = "z",label = "Color by:",
choices = c("percentage_growth"),
selected = "percentage_growth")
),
wellPanel(
h3("Plot 2"),
# Select variable for x-axis
selectInput(inputId = "x2", label = "x-axis: Population",
choices = c("1960" = "X1960",
"1970" = "X1970",
"1980" = "X1980",
"1990" = "X1990",
"2000" = "X2000",
"2010" = "X2010",
"2017" = "X2017"),
selected = "1960"),
selectInput(inputId = "y2", label = "Y-axis: Area",
choices = c("Area", "logArea"),
selected = "Area"),
selectInput(inputId = "z2",label = "Color by:",
choices = c("Continent", "Region"),
selected = "Continent"),
textInput(inputId = "plot_title",
label = "Plot title",
placeholder = "Enter text for plot title")
#hr(),                # Horizontal line for visual separation
),
wellPanel(
h3("Subsetting"),
checkboxGroupInput(inputId = "selected_continent",
label = "Select Continent:",
choices = c("Europe", "Africa", "Asia", "Oceania", "America"),
selected = c("Europe", "Africa", "Asia", "Oceania", "America"))
),
#br(), br(),
h5("Built with",
img(src = "http://www.worldbank.org/content/dam/wbr/logo/logo-wb-header-en.svg", height = "30px") )
),
# Outputs
mainPanel(
#plotOutput(outputId = "scatterplot"),
#plotOutput(outputId = "scatterplot2"),
#textOutput(outputId = "description")
tabsetPanel(type = "tabs",
# Tab 1: Plot
tabPanel(title = "Plot 1",
plotOutput(outputId = "scatterplot")
),
# Tab 2: Data
tabPanel(title = "Plot 2",
br(),
plotOutput(outputId = "scatterplot2"),
h5(textOutput("description"))
)
)
)
)
)
server <- function(input, output) {
# Create a subset of data filtering for selected title types
population_subset <- reactive({
req(input$selected_continent)
filter(population, Continent %in% input$selected_continent)
})
# Convert plot_title toTitleCase
pretty_plot_title <- reactive({ toTitleCase(input$plot_title) })
# Create the scatterplot object the plotOutput function is expecting
output$scatterplot <- renderPlot({
ggplot(growth, aes_string(x = input$x, y = input$y, color = input$z)) +  geom_point()
})
output$scatterplot2 <- renderPlot({
ggplot(population_subset(), aes_string(x = input$x2, y = input$y2, color = input$z2)) +
geom_point()
})
# Create descriptive text
output$description <- renderText({
paste0("The plot above titled '", pretty_plot_title(), "' visualizes the relationship between ",
input$x2, " and ", input$y2, ", conditional on ", input$z2, ".")
})
}
shinyApp(ui = ui, server = server)
{library(shiny)
library(ggplot2)
library(shinydashboard)
library(tools)
library(DT)
library(dplyr)
library(shinydashboard)
library(stringr)}
setwd('/home/nicole/Data Science/exam_big_data')
density <- read.csv("Clean/density_clean.csv")
population <- read.csv("Clean/population_clean.csv")
pop_per_continent <- read.csv("Clean/pop_per_continent.csv")
growth <- read.csv("Clean/growth_clean.csv")
growth <- growth[-nrow(growth),]
ui <- dashboardPage(
dashboardHeader(title = "World population"),
dashboardSidebar(sidebarMenu(
menuItem("Population Density", tabName = "dens", icon = icon("arrow-right")),
menuItem("Population Growth", tabName = "grow", icon = icon("arrow-right")),
menuItem(h5("Built with",
img(src = "http://www.worldbank.org/content/dam/wbr/logo/logo-wb-header-en.svg", height = "30px") )
)
)),
dashboardBody(
tabItems(
# Second tab content
tabItem(tabName = "grow",
#h2("Population Growth Analysis"),
fluidRow(
box(title = "Population Growth", width=6, #status="primary Blue",
background = "navy", solidHeader = TRUE,
plotOutput("plot1", height=300)),
box(
title = "Controls", width=4,
selectInput(inputId = "x", label = "X-axis:",
choices = c("year"),
selected = "year"),
selectInput(inputId = "y", label = "Y-axis:",
choices = c("Total World Population" = "WorldPopulation",
"Percentage of annual growth" = "percentage_growth"),
selected = "Percentage of annual growth"),
selectInput(inputId = "z",label = "Color by:",
choices = c("Percentage of annual growth" = "percentage_growth"),
selected = "Percentage of annual growth")
)# close box
)# closed fluidrow
),
tabItem(tabName = "dens",
# Boxes need to be put in a row (or column)
fluidRow(
box(title = "Amount of population as a function of the years", width=6, #status="primary Blue",
background = "navy", solidHeader = TRUE,
plotOutput("plot2", height=300)),
box(
title = "Controls", width=4, #background = "black",
selectInput(inputId = "x2", label = "x-axis: Amount of population in Year",
choices = c("1960" = "X1960",
"1970" = "X1970",
"1980" = "X1980",
"1990" = "X1990",
"2000" = "X2000",
"2010" = "X2010",
"2017" = "X2017"),
selected = "1960"),
selectInput(inputId = "y2", label = "Y-axis: Occupied Area",
choices = c("Area", "logArea"),
selected = "Area"),
selectInput(inputId = "z2",label = "Color by:",
choices = c("Continent", "Region"),
selected = "Continent"),
checkboxGroupInput(inputId = "selected_continent",
label = "Select Continent:",
choices = c("Europe", "Africa", "Asia", "Oceania", "America"),
selected = c("Europe"))
)# closed box
), # closed fluidrow
fluidRow(
box(title = "Pop in the world", width=6, #status="primary Blue",
background = "navy", solidHeader = TRUE,
plotOutput("plotmap", height=300))
)
) # closed tabitem
)
)
)
server <- function(input, output) {
population_subset <- reactive({
req(input$selected_continent)
filter(population, Continent %in% input$selected_continent)
})
output$plot1 <- renderPlot({
ggplot(growth, aes_string(x = input$x, y = input$y, color = input$z)) +
geom_point()+scale_x_discrete(breaks=seq(1960, 2017, 5))+
theme(legend.position="none")
})
###
Map <- joinCountryData2Map(DF, joinCode = "ISO3",nameJoinColumn = "country")
output$plotmap <- renderPlot({
mapCountryData(pMap, nameColumnToPlot="Pop", catMethod = "logFixedWidth",
missingCountryCol = gray(.8), colourPalette=colourPale)
})
###
output$plot2 <- renderPlot({
ggplot(population_subset(), aes_string(x = input$x2, y = input$y2, color = input$z2)) +
geom_point()
})
}
shinyApp(ui, server)
library(shiny)
library(shinythemes)
library(ggplot2)
library(tools)
library(DT)
library(dplyr)
library(shinydashboard)
library(stringr)
density <- read.csv("Clean/density_clean.csv")
population <- read.csv("Clean/population_clean.csv")
pop_per_continent <- read.csv("Clean/pop_per_continent.csv")
growth <- read.csv("Clean/growth_clean.csv")
ui <- fluidPage(theme = shinytheme("cerulean"),
titlePanel("World Population Study, 1960 - 2017"),
# Sidebar layout with a input and output definitions
sidebarLayout(
# Inputs
sidebarPanel(
wellPanel(
h3("Plot 1"),
selectInput(inputId = "x", label = "X-axis:",
choices = c("year"),
selected = "year"),
selectInput(inputId = "y", label = "Y-axis:",
choices = c("WorldPopulation","percentage_growth"),
selected = "WorldPopulation"),
selectInput(inputId = "z",label = "Color by:",
choices = c("percentage_growth"),
selected = "percentage_growth")
),
wellPanel(
h3("Plot 2"),
# Select variable for x-axis
selectInput(inputId = "x2", label = "x-axis: Population",
choices = c("1960" = "X1960",
"1970" = "X1970",
"1980" = "X1980",
"1990" = "X1990",
"2000" = "X2000",
"2010" = "X2010",
"2017" = "X2017"),
selected = "1960"),
selectInput(inputId = "y2", label = "Y-axis: Area",
choices = c("Area", "logArea"),
selected = "Area"),
selectInput(inputId = "z2",label = "Color by:",
choices = c("Continent", "Region"),
selected = "Continent"),
textInput(inputId = "plot_title",
label = "Plot title",
placeholder = "Enter text for plot title")
#hr(),                # Horizontal line for visual separation
),
wellPanel(
h3("Subsetting"),
checkboxGroupInput(inputId = "selected_continent",
label = "Select Continent:",
choices = c("Europe", "Africa", "Asia", "Oceania", "America"),
selected = c("Europe", "Africa", "Asia", "Oceania", "America"))
),
#br(), br(),
h5("Built with",
img(src = "http://www.worldbank.org/content/dam/wbr/logo/logo-wb-header-en.svg", height = "30px") )
),
# Outputs
mainPanel(
#plotOutput(outputId = "scatterplot"),
#plotOutput(outputId = "scatterplot2"),
#textOutput(outputId = "description")
tabsetPanel(type = "tabs",
# Tab 1: Plot
tabPanel(title = "Plot 1",
plotOutput(outputId = "scatterplot")
),
# Tab 2: Data
tabPanel(title = "Plot 2",
br(),
plotOutput(outputId = "scatterplot2"),
h5(textOutput("description"))
)
)
)
)
)
server <- function(input, output) {
# Create a subset of data filtering for selected title types
population_subset <- reactive({
req(input$selected_continent)
filter(population, Continent %in% input$selected_continent)
})
# Convert plot_title toTitleCase
pretty_plot_title <- reactive({ toTitleCase(input$plot_title) })
# Create the scatterplot object the plotOutput function is expecting
output$scatterplot <- renderPlot({
ggplot(growth, aes_string(x = input$x, y = input$y, color = input$z)) +  geom_point()
})
output$scatterplot2 <- renderPlot({
ggplot(population_subset(), aes_string(x = input$x2, y = input$y2, color = input$z2)) +
geom_point()
})
# Create descriptive text
output$description <- renderText({
paste0("The plot above titled '", pretty_plot_title(), "' visualizes the relationship between ",
input$x2, " and ", input$y2, ", conditional on ", input$z2, ".")
})
}
shinyApp(ui = ui, server = server)
