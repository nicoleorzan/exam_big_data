tot_pop <- tot_pop %>%
filter(Country.Name==place)
colnames(birth_rate) <- c("Country", "Country.Code", "Indicator.Name", "Indicator.Code", substring(colnames(birth_rate[,6:length(birth_rate)-1]), 2), "X")
colnames(death_rate) <- c("Country", "Country.Code", "Indicator.Name", "Indicator.Code", substring(colnames(death_rate[,6:length(death_rate)-1]), 2), "X")
colnames(tot_pop) <- c("Country", "Country.Code", "Indicator.Name", "Indicator.Code", substring(colnames(tot_pop[,6:length(tot_pop)-1]), 2), "X")
birth_rate[1:4] <- NULL; death_rate[1:4] <- NULL; tot_pop[1:4] <- NULL
birth <- gather(birth_rate, key="year", "births", 1:ncol(birth_rate))
death <- gather(death_rate, key="year", "deaths", 1:ncol(death_rate))
pop <- gather(tot_pop, key="year", "quantity", 1:ncol(tot_pop))
birth <- birth[-c(58,59),]
death <- death[-c(58,59),]
pop <- pop[-c(58,59),]
#pop$quantity <- pop$quantity/10000000
tmp <- left_join(birth, death, by="year")
return(left_join(tmp, pop, by="year"))
}
place <- "Italy"
full <- dem_trans(place)
p <- plot_ly(full, x = ~year, y = ~births, name = 'births', type = 'scatter', mode = 'lines+markers') %>%
add_trace(y = ~deaths, name = 'deaths', mode = 'lines+markers') %>%
#add_trace(y = ~quantity, name = 'population amount(div 10e7)', mode = 'lines+markers') %>%
layout(title = "Demoghraphic Transition",
xaxis = list(title = "Year"),
yaxis = list (title = paste("Deaths/Births (per 1000 people) in ",place)))
p <- plot_ly(full, x = ~year, y = ~quantity, name = 'population amount(div 10e7)', mode = 'lines+markers') %>%
#add_trace(y = ~deaths, name = 'deaths', mode = 'lines+markers') %>%
# add_trace(y = ~quantity, name = 'population amount(div 10e7)', mode = 'lines+markers') %>%
layout(title = "Demoghraphic Transition",
xaxis = list(title = "Year"),
yaxis = list (title = paste("Deaths/Births (per 1000 people) in ",place)))
p
View(full)
p <- plot_ly(full, x = ~year, y = ~quantity, name = 'population amount(div 10e7)', type = 'scatter', mode = 'lines+markers') %>%
#add_trace(y = ~deaths, name = 'deaths', mode = 'lines+markers') %>%
# add_trace(y = ~quantity, name = 'population amount(div 10e7)', mode = 'lines+markers') %>%
layout(title = "Demoghraphic Transition",
xaxis = list(title = "Year"),
yaxis = list (title = paste("Deaths/Births (per 1000 people) in ",place)))
p
p <- plot_ly(full, x = ~year, y = ~quantity, name = 'population amount(div 10e7)', type = 'scatter', mode = 'lines+markers') %>%
#add_trace(y = ~deaths, name = 'deaths', mode = 'lines+markers') %>%
# add_trace(y = ~quantity, name = 'population amount(div 10e7)', mode = 'lines+markers') %>%
layout(title = "Demoghraphic Transition - population amount(div 10e7)",
xaxis = list(title = "Year"),
yaxis = list (title = paste("Total population of ",place)))
p
p <- plot_ly(full, x = ~year, y = ~quantity, name = 'population amount(div 10e7)', type = 'scatter', mode = 'lines+markers') %>%
#add_trace(y = ~deaths, name = 'deaths', mode = 'lines+markers') %>%
# add_trace(y = ~quantity, name = 'population amount(div 10e7)', mode = 'lines+markers') %>%
layout(title = "Population amount",
xaxis = list(title = "Year"),
yaxis = list (title = paste("Total population of ",place)))
p
p1 <- plot_ly(full, x = ~year, y = ~births, name = 'births', type = 'scatter', mode = 'lines+markers') %>%
add_trace(y = ~deaths, name = 'deaths', mode = 'lines+markers') %>%
#add_trace(y = ~quantity, name = 'population amount(div 10e7)', mode = 'lines+markers') %>%
layout(title = "Demoghraphic Transition",
xaxis = list(title = "Year"),
yaxis = list (title = paste("Deaths/Births (per 1000 people) in ",place)))
p2 <- plot_ly(full, x = ~year, y = ~quantity, name = 'population amount(div 10e7)', type = 'scatter', mode = 'lines+markers') %>%
#add_trace(y = ~deaths, name = 'deaths', mode = 'lines+markers') %>%
# add_trace(y = ~quantity, name = 'population amount(div 10e7)', mode = 'lines+markers') %>%
layout(title = "Population amount",
xaxis = list(title = "Year"),
yaxis = list (title = paste("Total population of ",place)))
p <- subplot(p1, p2)
p
p2 <- plot_ly(full, x = ~year, y = ~quantity, name = 'population', type = 'scatter', mode = 'lines+markers') %>%
#add_trace(y = ~deaths, name = 'deaths', mode = 'lines+markers') %>%
# add_trace(y = ~quantity, name = 'population amount(div 10e7)', mode = 'lines+markers') %>%
layout(title = "Population amount",
xaxis = list(title = "Year"),
yaxis = list (title = paste("Total population of ",place)))
p <- subplot(p1, p2)
p
#setwd('/home/nicole/Data Science/exam_big_data')
birth_rate <- read.csv("Datasets/birth_rate.csv", skip=4)
death_rate <- read.csv("Datasets/death_rate.csv", skip=4)
tot_pop <- read.csv("Datasets/total_population.csv", skip=4)
dem_trans <- function(place) {
birth_rate <- birth_rate %>%
filter(Country.Name==place)
death_rate <- death_rate %>%
filter(Country.Name==place)
tot_pop <- tot_pop %>%
filter(Country.Name==place)
colnames(birth_rate) <- c("Country", "Country.Code", "Indicator.Name", "Indicator.Code", substring(colnames(birth_rate[,6:length(birth_rate)-1]), 2), "X")
colnames(death_rate) <- c("Country", "Country.Code", "Indicator.Name", "Indicator.Code", substring(colnames(death_rate[,6:length(death_rate)-1]), 2), "X")
colnames(tot_pop) <- c("Country", "Country.Code", "Indicator.Name", "Indicator.Code", substring(colnames(tot_pop[,6:length(tot_pop)-1]), 2), "X")
birth_rate[1:4] <- NULL; death_rate[1:4] <- NULL; tot_pop[1:4] <- NULL
birth <- gather(birth_rate, key="year", "births", 1:ncol(birth_rate))
death <- gather(death_rate, key="year", "deaths", 1:ncol(death_rate))
pop <- gather(tot_pop, key="year", "quantity", 1:ncol(tot_pop))
birth <- birth[-c(58,59),]
death <- death[-c(58,59),]
pop <- pop[-c(58,59),]
#pop$quantity <- pop$quantity/10000000
tmp <- left_join(birth, death, by="year")
return(left_join(tmp, pop, by="year"))
}
place <- "Italy"
full <- dem_trans(place)
p1 <- plot_ly(full, x = ~year, y = ~births, name = 'births', type = 'scatter', mode = 'lines+markers') %>%
add_trace(y = ~deaths, name = 'deaths', mode = 'lines+markers') %>%
#add_trace(y = ~quantity, name = 'population amount(div 10e7)', mode = 'lines+markers') %>%
layout(title = "Demoghraphic Transition",
xaxis = list(title = "Year"),
yaxis = list (title = paste("Deaths/Births (per 1000 people) in ",place)))
p2 <- plot_ly(full, x = ~year, y = ~quantity, name = 'population', type = 'scatter', mode = 'lines+markers') %>%
#add_trace(y = ~deaths, name = 'deaths', mode = 'lines+markers') %>%
# add_trace(y = ~quantity, name = 'population amount(div 10e7)', mode = 'lines+markers') %>%
layout(title = "Population amount",
xaxis = list(title = "Year"),
yaxis = list (title = paste("Total population of ",place)))
p <- subplot(p1, p2)
p
?subplot
library(tidyr)
library(dplyr)
#setwd('/home/nicole/Data Science/exam_big_data')
birth_rate <- read.csv("Datasets/birth_rate.csv", skip=4)
death_rate <- read.csv("Datasets/death_rate.csv", skip=4)
tot_pop <- read.csv("Datasets/total_population.csv", skip=4)
dem_trans <- function(place) {
birth_rate <- birth_rate %>%
filter(Country.Name==place)
death_rate <- death_rate %>%
filter(Country.Name==place)
tot_pop <- tot_pop %>%
filter(Country.Name==place)
colnames(birth_rate) <- c("Country", "Country.Code", "Indicator.Name", "Indicator.Code", substring(colnames(birth_rate[,6:length(birth_rate)-1]), 2), "X")
colnames(death_rate) <- c("Country", "Country.Code", "Indicator.Name", "Indicator.Code", substring(colnames(death_rate[,6:length(death_rate)-1]), 2), "X")
colnames(tot_pop) <- c("Country", "Country.Code", "Indicator.Name", "Indicator.Code", substring(colnames(tot_pop[,6:length(tot_pop)-1]), 2), "X")
birth_rate[1:4] <- NULL; death_rate[1:4] <- NULL; tot_pop[1:4] <- NULL
birth <- gather(birth_rate, key="year", "births", 1:ncol(birth_rate))
death <- gather(death_rate, key="year", "deaths", 1:ncol(death_rate))
pop <- gather(tot_pop, key="year", "quantity", 1:ncol(tot_pop))
birth <- birth[-c(58,59),]
death <- death[-c(58,59),]
pop <- pop[-c(58,59),]
#pop$quantity <- pop$quantity/10000000
tmp <- left_join(birth, death, by="year")
return(left_join(tmp, pop, by="year"))
}
place <- "Italy"
full <- dem_trans(place)
p1 <- plot_ly(full, x = ~year, y = ~births, name = 'births', type = 'scatter', mode = 'lines+markers') %>%
add_trace(y = ~deaths, name = 'deaths', mode = 'lines+markers') %>%
#add_trace(y = ~quantity, name = 'population amount(div 10e7)', mode = 'lines+markers') %>%
layout(title = "Demoghraphic Transition",
xaxis = list(title = "Year"),
yaxis = list (title = paste("Deaths/Births (per 1000 people) in ",place)))
p2 <- plot_ly(full, x = ~year, y = ~quantity, name = 'population', type = 'scatter', mode = 'lines+markers') %>%
#add_trace(y = ~deaths, name = 'deaths', mode = 'lines+markers') %>%
# add_trace(y = ~quantity, name = 'population amount(div 10e7)', mode = 'lines+markers') %>%
layout(title = "Demoghraphic Transition",
xaxis = list(title = "Year"),
yaxis = list (title = paste("Total population of ",place)))
p <- subplot(p1, p2, shareX = TRUE)
p
p1 <- plot_ly(full, x = ~year, y = ~births, name = 'births', type = 'scatter', mode = 'lines+markers') %>%
add_trace(y = ~deaths, name = 'deaths', mode = 'lines+markers') %>%
layout(autosize = F, width = 500, height = 500, margin = m) %>%
layout(title = "Demoghraphic Transition",
xaxis = list(title = "Year"),
yaxis = list (title = paste("Deaths/Births (per 1000 people) in ",place)))
p1 <- plot_ly(full, x = ~year, y = ~births, name = 'births', type = 'scatter', mode = 'lines+markers') %>%
add_trace(y = ~deaths, name = 'deaths', mode = 'lines+markers') %>%
layout(autosize = F, width = 500, height = 500) %>%
layout(title = "Demoghraphic Transition",
xaxis = list(title = "Year"),
yaxis = list (title = paste("Deaths/Births (per 1000 people) in ",place)))
?layout
?layout
p1 <- plot_ly(full, x = ~year, y = ~births, name = 'births', type = 'scatter', mode = 'lines+markers') %>%
add_trace(y = ~deaths, name = 'deaths', mode = 'lines+markers') %>%
layout(autosize = F, width = 500, height = 500, title = "Demoghraphic Transition",
xaxis = list(title = "Year"),
yaxis = list (title = paste("Deaths/Births (per 1000 people) in ",place)))
?plot_ly
p1 <- plot_ly(full, x = ~year, y = ~births, name = 'births', type = 'scatter', mode = 'lines+markers',width = 500, height = 500, ) %>%
add_trace(y = ~deaths, name = 'deaths', mode = 'lines+markers') %>%
layout(title = "Demoghraphic Transition",
xaxis = list(title = "Year"),
yaxis = list (title = paste("Deaths/Births (per 1000 people) in ",place)))
p1 <- plot_ly(full, x = ~year, y = ~births, name = 'births', type = 'scatter', mode = 'lines+markers',width = 500, height = 500) %>%
add_trace(y = ~deaths, name = 'deaths', mode = 'lines+markers') %>%
layout(title = "Demoghraphic Transition",
xaxis = list(title = "Year"),
yaxis = list (title = paste("Deaths/Births (per 1000 people) in ",place)))
p1 <- plot_ly(full, x = ~year, y = ~births, name = 'births', type = 'scatter', mode = 'lines+markers',width = 300, height = 300) %>%
add_trace(y = ~deaths, name = 'deaths', mode = 'lines+markers') %>%
layout(title = "Demoghraphic Transition",
xaxis = list(title = "Year"),
yaxis = list (title = paste("Deaths/Births (per 1000 people) in ",place)))
p2 <- plot_ly(full, x = ~year, y = ~quantity, name = 'population', type = 'scatter', mode = 'lines+markers',width = 300, height = 300) %>%
layout(title = "Demoghraphic Transition",
xaxis = list(title = "Year"),
yaxis = list (title = paste("Total population of ",place)))
p <- subplot(p1, p2, shareX = TRUE, titleX = TRUE, titleY = TRUE, margin = c(0,0,1,1))
p
View(birth)
View(death)
View(full)
knitr::image_url
knitr::image_uri
?knitr::image_uri
?htmltools::img
library(shiny)
library(shinythemes)
library(ggplot2)
library(tools)
library(DT)
library(shinydashboard)
library(stringr)
density <- read.csv("Clean/density_clean.csv")
population <- read.csv("Clean/population_clean.csv")
pop_per_continent <- read.csv("Clean/pop_per_continent.csv")
growth <- read.csv("Clean/growth_clean.csv")
ui <- fluidPage(theme = shinytheme("cerulean"),
titlePanel("World Population Study, 1960 - 2017"),
# Sidebar layout with a input and output definitions
sidebarLayout(
# Inputs
sidebarPanel(
wellPanel(
h3("Plot 1"),
selectInput(inputId = "x", label = "X-axis:",
choices = c("year"),
selected = "year"),
selectInput(inputId = "y", label = "Y-axis:",
choices = c("WorldPopulation","percentage_growth"),
selected = "WorldPopulation"),
selectInput(inputId = "z",label = "Color by:",
choices = c("percentage_growth"),
selected = "percentage_growth")
),
wellPanel(
h3("Plot 2"),
# Select variable for x-axis
selectInput(inputId = "x2", label = "x-axis: Population",
choices = c("1960" = "X1960",
"1970" = "X1970",
"1980" = "X1980",
"1990" = "X1990",
"2000" = "X2000",
"2010" = "X2010",
"2017" = "X2017"),
selected = "1960"),
selectInput(inputId = "y2", label = "Y-axis: Area",
choices = c("Area", "logArea"),
selected = "Area"),
selectInput(inputId = "z2",label = "Color by:",
choices = c("Continent", "Region"),
selected = "Continent"),
textInput(inputId = "plot_title",
label = "Plot title",
placeholder = "Enter text for plot title")
#hr(),                # Horizontal line for visual separation
),
wellPanel(
h3("Subsetting"),
checkboxGroupInput(inputId = "selected_continent",
label = "Select Continent:",
choices = c("Europe", "Africa", "Asia", "Oceania", "America"),
selected = c("Europe", "Africa", "Asia", "Oceania", "America"))
),
#br(), br(),
h5("Built with",
img(src = "http://www.worldbank.org/content/dam/wbr/logo/logo-wb-header-en.svg", height = "30px") )
),
# Outputs
mainPanel(
#plotOutput(outputId = "scatterplot"),
#plotOutput(outputId = "scatterplot2"),
#textOutput(outputId = "description")
tabsetPanel(type = "tabs",
# Tab 1: Plot
tabPanel(title = "Plot 1",
plotOutput(outputId = "scatterplot")
),
# Tab 2: Data
tabPanel(title = "Plot 2",
br(),
plotOutput(outputId = "scatterplot2"),
h5(textOutput("description"))
)
)
)
)
)
server <- function(input, output) {
# Create a subset of data filtering for selected title types
population_subset <- reactive({
req(input$selected_continent)
filter(population, Continent %in% input$selected_continent)
})
# Convert plot_title toTitleCase
pretty_plot_title <- reactive({ toTitleCase(input$plot_title) })
# Create the scatterplot object the plotOutput function is expecting
output$scatterplot <- renderPlot({
ggplot(growth, aes_string(x = input$x, y = input$y, color = input$z)) +  geom_point()
})
output$scatterplot2 <- renderPlot({
ggplot(population_subset(), aes_string(x = input$x2, y = input$y2, color = input$z2)) +
geom_point()
})
# Create descriptive text
output$description <- renderText({
paste0("The plot above titled '", pretty_plot_title(), "' visualizes the relationship between ",
input$x2, " and ", input$y2, ", conditional on ", input$z2, ".")
})
}
shinyApp(ui = ui, server = server)
{library(shiny)
library(shinythemes)
library(ggplot2)
library(tools)
library(DT)
library(dplyr)
library(shinydashboard)
library(stringr)
}
density <- read.csv("Clean/density_clean.csv")
population <- read.csv("Clean/population_clean.csv")
pop_per_continent <- read.csv("Clean/pop_per_continent.csv")
growth <- read.csv("Clean/growth_clean.csv")
ui <- fluidPage(theme = shinytheme("cerulean"),
titlePanel("World Population Study, 1960 - 2017"),
# Sidebar layout with a input and output definitions
sidebarLayout(
# Inputs
sidebarPanel(
wellPanel(
h3("Plot 1"),
selectInput(inputId = "x", label = "X-axis:",
choices = c("year"),
selected = "year"),
selectInput(inputId = "y", label = "Y-axis:",
choices = c("WorldPopulation","percentage_growth"),
selected = "WorldPopulation"),
selectInput(inputId = "z",label = "Color by:",
choices = c("percentage_growth"),
selected = "percentage_growth")
),
wellPanel(
h3("Plot 2"),
# Select variable for x-axis
selectInput(inputId = "x2", label = "x-axis: Population",
choices = c("1960" = "X1960",
"1970" = "X1970",
"1980" = "X1980",
"1990" = "X1990",
"2000" = "X2000",
"2010" = "X2010",
"2017" = "X2017"),
selected = "1960"),
selectInput(inputId = "y2", label = "Y-axis: Area",
choices = c("Area", "logArea"),
selected = "Area"),
selectInput(inputId = "z2",label = "Color by:",
choices = c("Continent", "Region"),
selected = "Continent"),
textInput(inputId = "plot_title",
label = "Plot title",
placeholder = "Enter text for plot title")
#hr(),                # Horizontal line for visual separation
),
wellPanel(
h3("Subsetting"),
checkboxGroupInput(inputId = "selected_continent",
label = "Select Continent:",
choices = c("Europe", "Africa", "Asia", "Oceania", "America"),
selected = c("Europe", "Africa", "Asia", "Oceania", "America"))
),
#br(), br(),
h5("Built with",
img(src = "http://www.worldbank.org/content/dam/wbr/logo/logo-wb-header-en.svg", height = "30px") )
),
# Outputs
mainPanel(
#plotOutput(outputId = "scatterplot"),
#plotOutput(outputId = "scatterplot2"),
#textOutput(outputId = "description")
tabsetPanel(type = "tabs",
# Tab 1: Plot
tabPanel(title = "Plot 1",
plotOutput(outputId = "scatterplot")
),
# Tab 2: Data
tabPanel(title = "Plot 2",
br(),
plotOutput(outputId = "scatterplot2"),
h5(textOutput("description"))
)
)
)
)
)
server <- function(input, output) {
# Create a subset of data filtering for selected title types
population_subset <- reactive({
req(input$selected_continent)
filter(population, Continent %in% input$selected_continent)
})
# Convert plot_title toTitleCase
pretty_plot_title <- reactive({ toTitleCase(input$plot_title) })
# Create the scatterplot object the plotOutput function is expecting
output$scatterplot <- renderPlot({
ggplot(growth, aes_string(x = input$x, y = input$y, color = input$z)) +  geom_point()
})
output$scatterplot2 <- renderPlot({
ggplot(population_subset(), aes_string(x = input$x2, y = input$y2, color = input$z2)) +
geom_point()
})
# Create descriptive text
output$description <- renderText({
paste0("The plot above titled '", pretty_plot_title(), "' visualizes the relationship between ",
input$x2, " and ", input$y2, ", conditional on ", input$z2, ".")
})
}
shinyApp(ui = ui, server = server)
View(full)
full <- full %>%
mutate(percentage_growth = (quantity-lag(quantity))/(lag(quantity)*(year-lag(year))))
full <- full %>%
mutate(percentage_growth = (quantity-lag(quantity))
full <- full %>%
mutate(percentage_growth = (quantity-lag(quantity)))
View(full)
full <- full %>%
mutate(percentage_growth = (quantity-lag(quantity)))
full <- full %>%
mutate(percentage_growth = (quantity-lag(quantity)//(lag(quantity)*(year-lag(year))))
full <- full %>%
mutate(percentage_growth = (quantity-lag(quantity)/(lag(quantity)*(year-lag(year))))
full <- full %>%
mutate(percentage_growth = (quantity-lag(quantity)/(lag(quantity)*(year-lag(year)))))
full <- full %>%
mutate(percentage_growth = (quantity-lag(quantity)/(lag(quantity)*(year-lag(year)))))
is.numeric(full$quantity)
is.numeric(full$year)
full$year <- as.numeric(full$year)
full <- full %>%
mutate(percentage_growth = (quantity-lag(quantity)/(lag(quantity)*(year-lag(year)))))
full <- dem_trans(place)
full$year <- as.numeric(full$year)
full <- full %>%
mutate(percentage_growth = (quantity-lag(quantity)/(lag(quantity)*(year-lag(year)))))
full <- full %>%
mutate(percentage_growth = (quantity-lag(quantity)/(lag(quantity))))
full <- dem_trans(place)
full$year <- as.numeric(full$year)
full2 <- full %>%
mutate(percentage_growth = (quantity-lag(quantity)/(lag(quantity))))
View(full2)
full2 <- full %>%
mutate(percentage_growth = (quantity-lag(quantity)/(lag(quantity))))
full2 <- full %>%
mutate(percentage_growth = (quantity-lag(quantity)/(lag(quantity))))
full2 <- full %>%
select(quantity, year)%>%
mutate(percentage_growth = (quantity-lag(quantity)/(lag(quantity))))
full2 <- full %>%
select(q =quantity, y=year)%>%
mutate(p = (quantity-lag(quantity)/(lag(quantity))))
full2 <- full %>%
select(q =quantity, y=year)#%>%
full2 <- full %>%
select(q =quantity, y=year)%>%
mutate(p = (q-lag(q)/(lag(q))))
full2 <- full %>%
select(q =quantity, y=year)%>%
mutate(p = ((q-lag(q))/lag(q)))
ggplot(full, aes(x=y, y=p))
ggplot(full2, aes(x=y, y=p))
ggplot(full2, aes(x=y, y=p))+geom_line()
full2 <- full %>%
select(q =quantity, y=year)%>%
mutate(p = ((q-lag(q))/lag(q)*(y-lag(y))))
full2 <- full %>%
select(q =quantity, y=year)%>%
mutate(p = ((q-lag(q))/lag(q)*(y-1960)))
ggplot(full2, aes(x=y, y=p))+geom_line()
full2 <- full %>%
select(q =quantity, y=year)%>%
mutate(p = ((q-full2$q[1])/lag(q)*(y-1960)))
full2$q[1]
full2 <- full %>%
select(q =quantity, y=year)%>%
mutate(p = ((q-full2$q[1])/(full2$q[1]*(y-1960)  )))
ggplot(full2, aes(x=y, y=p))+geom_line()
p1 <- plot_ly(full2, x = ~y, y = ~p, name = 'PGR', type = 'scatter', mode = 'lines+markers') %>%
add_trace(y = ~deaths, name = 'deaths', mode = 'lines+markers') %>%
#add_trace(y = ~quantity, name = 'population amount(div 10e7)', mode = 'lines+markers') %>%
layout(title = "Demoghraphic Transition: PGR",
xaxis = list(title = "Year"),
yaxis = list (title = paste("PGR of ",place)))
p1
p1 <- plot_ly(full2, x = ~y, y = ~p, name = 'PGR', type = 'scatter', mode = 'lines+markers') %>%
layout(title = "Demoghraphic Transition: PGR",
xaxis = list(title = "Year"),
yaxis = list (title = paste("PGR of ",place)))
p1
full2 <- full %>%
select(q =quantity, y=year)%>%
mutate(p = ((q-lag(q))/(lag(q))))
p1 <- plot_ly(full2, x = ~y, y = ~p, name = 'PGR', type = 'scatter', mode = 'lines+markers') %>%
layout(title = "Demoghraphic Transition: PGR",
xaxis = list(title = "Year"),
yaxis = list (title = paste("PGR of ",place)))
p1
