de$year <- substring(de$year, 8)
setwd('/home/nicole/Data Science/exam_big_data/Clean')
density <- read.csv("density_clean_with_NAs.csv")
density <- density[,2:ncol(density)]
de <- gather(density, "year", "density", 5:11)
de$year <- substring(de$year, 8)
de <- de %>%
mutate(dens_step = ifelse(density<50, 0,
ifelse(density<100, 1,
ifelse(density<200, 2,
ifelse(density<300, 3, 4)))))
fills = setNames( c(RColorBrewer::brewer.pal(5, 'YlOrRd'), 'white'),
c(seq(1,5, 1), 'defaultFill')
)
m <- leaflet(de) %>%
setView(-1, 42, zoom=2) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
labels <- sprintf(
"<strong>%s</strong><br/>%g people / m<sup>2</sup>",
prova$name, prova$Density2017
) %>% lapply(htmltools::HTML)
m <- m %>% addPolygons(
fillColor = ~pal(Density2017),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
View(de)
class(prova)
class(de)
setwd('/home/nicole/Data Science/exam_big_data')
states <- geojsonio::geojson_read("prova.geo.json", what = "sp")
class(states)
prova <- merge(states, de, by="name")
prova <- merge(states, de, by="Country")
colnames(de)[1] <- "name"
prova <- merge(states, de, by="name")
View(population)
setwd('/home/nicole/Data Science/exam_big_data/Clean')
population2 <- read.csv("population_clean.csv")
population <- read.csv("population_clean_with_NAs.csv")
density2 <- read.csv("density_clean.csv")
density <- read.csv("density_clean_with_NAs.csv")
population <- density
colnames(population)[2] <- "name"
{
levels(population$name) <- c(levels(population$name), "United States of America")
population$name[population$name == 'United States'] <- "United States of America"
levels(population$name) <- c(levels(population$name), "Russia")
population$name[population$name == 'Russian Federation'] <- "Russia"
levels(population$name) <- c(levels(population$name), "Democratic Republic of the Congo")
population$name[population$name == "Congo, Dem. Rep."] <- "Democratic Republic of the Congo"
levels(population$name) <- c(levels(population$name), "Iran")
population$name[population$name == "Iran, Islamic Rep."] <- "Iran"
levels(population$name) <- c(levels(population$name), "Republic of Serbia")
population$name[population$name == "Serbia"] <- "Republic of Serbia"
levels(population$name) <- c(levels(population$name), "Egypt")
population$name[population$name == "Egypt, Arab Rep."] <- "Egypt"
levels(population$name) <- c(levels(population$name), "Venezuela")
population$name[population$name == 'Venezuela, RB'] <- "Venezuela"
levels(population$name) <- c(levels(population$name), "United Republic of Tanzania")
population$name[population$name == "Tanzania"] <- "United Republic of Tanzania"
levels(population$name) <- c(levels(population$name), "Yemen")
population$name[population$name == 'Yemen, Rep.'] <- "Yemen"
levels(population$name) <- c(levels(population$name), "Ivory Coast")
population$name[population$name == "Cote d'Ivoire"] <- "Ivory Coast"
levels(population$name) <- c(levels(population$name), "Kyrgyzstan")
population$name[population$name == "Kyrgyz Republic"] <- "Kyrgyzstan"
levels(population$name) <- c(levels(population$name), "Syria")
population$name[population$name == "Syrian Arab Republic"] <- "Syria"
levels(population$name) <- c(levels(population$name), "Republic of the Congo")
population$name[population$name == "Congo, Rep."] <- "Republic of the Congo"
levels(population$name) <- c(levels(population$name), "Laos")
population$name[population$name == "Lao PDR"] <- "Laos"
levels(population$name) <- c(levels(population$name), "Slovakia")
population$name[population$name == "Slovak Republic"] <- "Slovakia"
levels(population$name) <- c(levels(population$name), "Macedonia")
population$name[population$name == "Macedonia, FYR"] <- "Macedonia"
levels(population$name) <- c(levels(population$name), "Guinea Bissau")
population$name[population$name == "Guinea-Bissau"] <- "Guinea Bissau"
levels(population$name) <- c(levels(population$name), "South Korea")
population$name[population$name == "Korea, Rep."] <- "South Korea"
levels(population$name) <- c(levels(population$name), "North Korea")
population$name[population$name == "Korea, Dem. People’s Rep."] <- "North Korea"
}
setwd('/home/nicole/Data Science/exam_big_data')
states <- geojsonio::geojson_read("prova.geo.json", what = "sp")
class(states)
View(population)
prova <- merge(states, de, by="name")
prova <- merge(states, population, by="name")
setwd('/home/nicole/Data Science/exam_big_data/Clean')
density <- read.csv("density_clean_with_NAs.csv")
density <- density[,2:ncol(density)]
de <- de %>%
mutate(dens_step = ifelse(density<50, 0,
ifelse(density<100, 1,
ifelse(density<200, 2,
ifelse(density<300, 3, 4)))))
fills = setNames( c(RColorBrewer::brewer.pal(5, 'YlOrRd'), 'white'),
c(seq(1,5, 1), 'defaultFill')
)
setwd('/home/nicole/Data Science/exam_big_data')
states <- geojsonio::geojson_read("prova.geo.json", what = "sp")
class(states)
colnames(de)[1] <- "name"
prova <- merge(states, de, by="name")
setwd('/home/nicole/Data Science/exam_big_data/Clean')
population2 <- read.csv("population_clean.csv")
population <- read.csv("population_clean_with_NAs.csv")
density2 <- read.csv("density_clean.csv")
density <- read.csv("density_clean_with_NAs.csv")
population <- density
colnames(population)[2] <- "name"
{
levels(population$name) <- c(levels(population$name), "United States of America")
population$name[population$name == 'United States'] <- "United States of America"
levels(population$name) <- c(levels(population$name), "Russia")
population$name[population$name == 'Russian Federation'] <- "Russia"
levels(population$name) <- c(levels(population$name), "Democratic Republic of the Congo")
population$name[population$name == "Congo, Dem. Rep."] <- "Democratic Republic of the Congo"
levels(population$name) <- c(levels(population$name), "Iran")
population$name[population$name == "Iran, Islamic Rep."] <- "Iran"
levels(population$name) <- c(levels(population$name), "Republic of Serbia")
population$name[population$name == "Serbia"] <- "Republic of Serbia"
levels(population$name) <- c(levels(population$name), "Egypt")
population$name[population$name == "Egypt, Arab Rep."] <- "Egypt"
levels(population$name) <- c(levels(population$name), "Venezuela")
population$name[population$name == 'Venezuela, RB'] <- "Venezuela"
levels(population$name) <- c(levels(population$name), "United Republic of Tanzania")
population$name[population$name == "Tanzania"] <- "United Republic of Tanzania"
levels(population$name) <- c(levels(population$name), "Yemen")
population$name[population$name == 'Yemen, Rep.'] <- "Yemen"
levels(population$name) <- c(levels(population$name), "Ivory Coast")
population$name[population$name == "Cote d'Ivoire"] <- "Ivory Coast"
levels(population$name) <- c(levels(population$name), "Kyrgyzstan")
population$name[population$name == "Kyrgyz Republic"] <- "Kyrgyzstan"
levels(population$name) <- c(levels(population$name), "Syria")
population$name[population$name == "Syrian Arab Republic"] <- "Syria"
levels(population$name) <- c(levels(population$name), "Republic of the Congo")
population$name[population$name == "Congo, Rep."] <- "Republic of the Congo"
levels(population$name) <- c(levels(population$name), "Laos")
population$name[population$name == "Lao PDR"] <- "Laos"
levels(population$name) <- c(levels(population$name), "Slovakia")
population$name[population$name == "Slovak Republic"] <- "Slovakia"
levels(population$name) <- c(levels(population$name), "Macedonia")
population$name[population$name == "Macedonia, FYR"] <- "Macedonia"
levels(population$name) <- c(levels(population$name), "Guinea Bissau")
population$name[population$name == "Guinea-Bissau"] <- "Guinea Bissau"
levels(population$name) <- c(levels(population$name), "South Korea")
population$name[population$name == "Korea, Rep."] <- "South Korea"
levels(population$name) <- c(levels(population$name), "North Korea")
population$name[population$name == "Korea, Dem. People’s Rep."] <- "North Korea"
}
setwd('/home/nicole/Data Science/exam_big_data')
states <- geojsonio::geojson_read("prova.geo.json", what = "sp")
class(states)
prova <- merge(states, population, by="name")
View(prova)
m <- leaflet(prova) %>%
setView(-1, 42, zoom=2) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
m <- leaflet(prova) %>%
setView(-1, 42, zoom=2) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
bins <- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf)
pal <- colorBin("YlOrRd", domain = states$density, bins = bins)
labels <- sprintf(
"<strong>%s</strong><br/>%g people / m<sup>2</sup>",
prova$name, prova$Density2017
) %>% lapply(htmltools::HTML)
m <- m %>% addPolygons(
fillColor = ~pal(Density2017),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
m
View(prova)
View(population)
de <- gather(population, "year", "density", 6:12)
prova <- merge(states, de, by="name")
View(de)
View(de)
View(states)
m <- leaflet(de) %>%
setView(-1, 42, zoom=2) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
bins <- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf)
pal <- colorBin("YlOrRd", domain = states$density, bins = bins)
labels <- sprintf(
"<strong>%s</strong><br/>%g people / m<sup>2</sup>",
prova$name, prova$Density2017
) %>% lapply(htmltools::HTML)
m <- m %>% addPolygons(
fillColor = ~pal(Density2017),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
class(states)
SpatialPolygonsDataFrame(de)
polygons(de)
ps <- lapply(de, Polygon)
prova <- merge(states, population, by="name")
m <- leaflet(prova) %>%
setView(-1, 42, zoom=2) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
bins <- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf)
pal <- colorBin("YlOrRd", domain = states$density, bins = bins)
labels <- sprintf(
"<strong>%s</strong><br/>%g people / m<sup>2</sup>",
prova$name, prova$Density2017
) %>% lapply(htmltools::HTML)
m <- m %>% addPolygons(
fillColor = ~pal(Density2017),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
?addLayersControl(
)
m %>% addLayersControl(overlayGroups = c("Density1990", "Density2017"))
m
m %>% addLayersControl(overlayGroups = c("Density1990", "Density2017"),
options = layersControlOptions(collapsed = FALSE))
m
?basegroup
??basegroup
??baseGroups
?addLayersControl
m %>% addLayersControl(baseGroups = c("Density1990", "Density2017"),
overlayGroups = c("Density1990", "Density2017"),
options = layersControlOptions(collapsed = FALSE))
m %>% addLayersControl(baseGroups = c("Density1990", "Density2017"),
#overlayGroups = c("Density1990", "Density2017"),
options = layersControlOptions(collapsed = FALSE))
m <- m %>% addPolygons(
#fillColor = ~pal(Density2017),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
m %>% addLayersControl(baseGroups = c("Density1990", "Density2017"),
#overlayGroups = c("Density1990", "Density2017"),
options = layersControlOptions(collapsed = FALSE))
m
m <- leaflet(prova) %>%
setView(-1, 42, zoom=2) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
bins <- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf)
pal <- colorBin("YlOrRd", domain = states$density, bins = bins)
labels <- sprintf(
"<strong>%s</strong><br/>%g people / m<sup>2</sup>",
prova$name, prova$Density2017
) %>% lapply(htmltools::HTML)
m <- m %>% addPolygons(
#fillColor = ~pal(Density2017),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
m %>% addLayersControl(baseGroups = c("Density1990", "Density2017"),
#overlayGroups = c("Density1990", "Density2017"),
options = layersControlOptions(collapsed = FALSE))
m
?addPolygons
m
m <- leaflet(prova) %>%
setView(-1, 42, zoom=2) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
bins <- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf)
pal <- colorBin("YlOrRd", domain = states$density, bins = bins)
labels <- sprintf(
"<strong>%s</strong><br/>%g people / m<sup>2</sup>",
prova$name, prova$Density2017
) %>% lapply(htmltools::HTML)
m <- m %>% addPolygons(
fillColor = ~pal(Density2017),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
m %>% addLayersControl(baseGroups = c("Density1990", "Density2017"),
#overlayGroups = c("Density1990", "Density2017"),
options = layersControlOptions(collapsed = FALSE))
m
m <- leaflet(prova) %>%
setView(-1, 42, zoom=2) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
bins <- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf)
pal <- colorBin("YlOrRd", domain = states$density, bins = bins)
labels <- sprintf(
"<strong>%s</strong><br/>%g people / m<sup>2</sup>",
prova$name, prova$Density2017
) %>% lapply(htmltools::HTML)
m <- m %>% addPolygons(
fillColor = ~pal(Density2017),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
m %>% addLayersControl(baseGroups = c("Density1990", "Density2017"),
#overlayGroups = c("Density1990", "Density2017"),
options = layersControlOptions(collapsed = FALSE))
m
m %>% addLayersControl(baseGroups = c("Density1990", "Density2017"),
overlayGroups = c("Density1990", "Density2017"),
options = layersControlOptions(collapsed = FALSE))
m
prova <- merge(states, population, by="name")
m <- leaflet(prova) %>%
setView(-1, 42, zoom=2) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
m#m %>% addPolygons()
bins <- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf)
pal <- colorBin("YlOrRd", domain = states$density, bins = bins)
labels <- sprintf(
"<strong>%s</strong><br/>%g people / m<sup>2</sup>",
prova$name, prova$Density2017
) %>% lapply(htmltools::HTML)
m <- m %>% addPolygons(
fillColor = ~pal(Density2017),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
m
m %>% addLayersControl(baseGroups = c("Density1990", "Density2017"),
overlayGroups = c("Density1990", "Density2017"),
options = layersControlOptions(collapsed = FALSE))
m %>% addLayersControl(baseGroups = c("Density1990", "Density2017"),
#overlayGroups = c("Density1990", "Density2017"),
options = layersControlOptions(collapsed = FALSE))
m
m
m %>% addLayersControl(baseGroups = c("Density1990", "Density2017"),
#overlayGroups = c("Density1990", "Density2017"),
options = layersControlOptions(collapsed = FALSE))
setwd('/home/nicole/Data Science/exam_big_data')
saveWidget(m, 'm.html', selfcontained = TRUE)
m <- m %>% addLayersControl(baseGroups = c("Density1990", "Density2017"),
#overlayGroups = c("Density1990", "Density2017"),
options = layersControlOptions(collapsed = FALSE))
setwd('/home/nicole/Data Science/exam_big_data')
saveWidget(m, 'm.html', selfcontained = TRUE)
leaflet(prova) %>%
addProviderTiles("OpenStreetMap.BlackAndWhite", group="Black&White") %>%
addProviderTiles("Esri.NatGeoWorldMap", group = "NatGeo") %>%
addProviderTiles("MapQuestOpen.Aerial", group = "Aerial")%>%
addLayersControl(
baseGroups = c("Black&White", "NatGeo", "Aerial"),
overlayGroups = df$Time,
options = layersControlOptions(collapsed = FALSE))
leaflet(prova) %>%
addProviderTiles("OpenStreetMap.BlackAndWhite", group="Black&White") %>%
addProviderTiles("Esri.NatGeoWorldMap", group = "NatGeo") %>%
addProviderTiles("MapQuestOpen.Aerial", group = "Aerial")%>%
addLayersControl(
baseGroups = c("Density1990", "Density2017"),
#overlayGroups = prova$Time,
options = layersControlOptions(collapsed = FALSE))
View(prova)
m <- m %>% addLayersControl(baseGroups = c("Density1990", "Density2017"),
#overlayGroups = c("Density1990", "Density2017"),
options = layersControlOptions(collapsed = FALSE)) %>%
addMarkers(data=prova$Density1990,# icon = ~ milIcons[df.Icon],
#group=”9:30 to 10:15 a.m.”,
popup = ~ df.Unit) %>%
addMarkers(data=prova$Density2017,# icon = ~ milIcons[df.Icon],
#group=”10:15 to 10:45 a.m.”,
popup = ~ df.Unit)
m <- m %>% addLayersControl(baseGroups = c("Density1990", "Density2017"),
#overlayGroups = c("Density1990", "Density2017"),
options = layersControlOptions(collapsed = FALSE)) %>%
addMarkers(data=de$Density1990,# icon = ~ milIcons[df.Icon],
#group=”9:30 to 10:15 a.m.”,
popup = ~ df.Unit) %>%
addMarkers(data=de$Density2017,# icon = ~ milIcons[df.Icon],
#group=”10:15 to 10:45 a.m.”,
popup = ~ df.Unit)
m <- m %>% addLayersControl(baseGroups = c("Density1990", "Density2017"),
#overlayGroups = c("Density1990", "Density2017"),
options = layersControlOptions(collapsed = FALSE))
m
source('~/.active-rstudio-document', echo=TRUE)
