SpatialPolygonsDataFrame(de)
polygons(de)
ps <- lapply(de, Polygon)
prova <- merge(states, population, by="name")
m <- leaflet(prova) %>%
setView(-1, 42, zoom=2) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
bins <- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf)
pal <- colorBin("YlOrRd", domain = states$density, bins = bins)
labels <- sprintf(
"<strong>%s</strong><br/>%g people / m<sup>2</sup>",
prova$name, prova$Density2017
) %>% lapply(htmltools::HTML)
m <- m %>% addPolygons(
fillColor = ~pal(Density2017),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
?addLayersControl(
)
m %>% addLayersControl(overlayGroups = c("Density1990", "Density2017"))
m
m %>% addLayersControl(overlayGroups = c("Density1990", "Density2017"),
options = layersControlOptions(collapsed = FALSE))
m
?basegroup
??basegroup
??baseGroups
?addLayersControl
m %>% addLayersControl(baseGroups = c("Density1990", "Density2017"),
overlayGroups = c("Density1990", "Density2017"),
options = layersControlOptions(collapsed = FALSE))
m %>% addLayersControl(baseGroups = c("Density1990", "Density2017"),
#overlayGroups = c("Density1990", "Density2017"),
options = layersControlOptions(collapsed = FALSE))
m <- m %>% addPolygons(
#fillColor = ~pal(Density2017),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
m %>% addLayersControl(baseGroups = c("Density1990", "Density2017"),
#overlayGroups = c("Density1990", "Density2017"),
options = layersControlOptions(collapsed = FALSE))
m
m <- leaflet(prova) %>%
setView(-1, 42, zoom=2) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
bins <- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf)
pal <- colorBin("YlOrRd", domain = states$density, bins = bins)
labels <- sprintf(
"<strong>%s</strong><br/>%g people / m<sup>2</sup>",
prova$name, prova$Density2017
) %>% lapply(htmltools::HTML)
m <- m %>% addPolygons(
#fillColor = ~pal(Density2017),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
m %>% addLayersControl(baseGroups = c("Density1990", "Density2017"),
#overlayGroups = c("Density1990", "Density2017"),
options = layersControlOptions(collapsed = FALSE))
m
?addPolygons
m
m <- leaflet(prova) %>%
setView(-1, 42, zoom=2) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
bins <- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf)
pal <- colorBin("YlOrRd", domain = states$density, bins = bins)
labels <- sprintf(
"<strong>%s</strong><br/>%g people / m<sup>2</sup>",
prova$name, prova$Density2017
) %>% lapply(htmltools::HTML)
m <- m %>% addPolygons(
fillColor = ~pal(Density2017),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
m %>% addLayersControl(baseGroups = c("Density1990", "Density2017"),
#overlayGroups = c("Density1990", "Density2017"),
options = layersControlOptions(collapsed = FALSE))
m
m <- leaflet(prova) %>%
setView(-1, 42, zoom=2) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
bins <- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf)
pal <- colorBin("YlOrRd", domain = states$density, bins = bins)
labels <- sprintf(
"<strong>%s</strong><br/>%g people / m<sup>2</sup>",
prova$name, prova$Density2017
) %>% lapply(htmltools::HTML)
m <- m %>% addPolygons(
fillColor = ~pal(Density2017),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
m %>% addLayersControl(baseGroups = c("Density1990", "Density2017"),
#overlayGroups = c("Density1990", "Density2017"),
options = layersControlOptions(collapsed = FALSE))
m
m %>% addLayersControl(baseGroups = c("Density1990", "Density2017"),
overlayGroups = c("Density1990", "Density2017"),
options = layersControlOptions(collapsed = FALSE))
m
prova <- merge(states, population, by="name")
m <- leaflet(prova) %>%
setView(-1, 42, zoom=2) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
m#m %>% addPolygons()
bins <- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf)
pal <- colorBin("YlOrRd", domain = states$density, bins = bins)
labels <- sprintf(
"<strong>%s</strong><br/>%g people / m<sup>2</sup>",
prova$name, prova$Density2017
) %>% lapply(htmltools::HTML)
m <- m %>% addPolygons(
fillColor = ~pal(Density2017),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
m
m %>% addLayersControl(baseGroups = c("Density1990", "Density2017"),
overlayGroups = c("Density1990", "Density2017"),
options = layersControlOptions(collapsed = FALSE))
m %>% addLayersControl(baseGroups = c("Density1990", "Density2017"),
#overlayGroups = c("Density1990", "Density2017"),
options = layersControlOptions(collapsed = FALSE))
m
m
m %>% addLayersControl(baseGroups = c("Density1990", "Density2017"),
#overlayGroups = c("Density1990", "Density2017"),
options = layersControlOptions(collapsed = FALSE))
setwd('/home/nicole/Data Science/exam_big_data')
saveWidget(m, 'm.html', selfcontained = TRUE)
m <- m %>% addLayersControl(baseGroups = c("Density1990", "Density2017"),
#overlayGroups = c("Density1990", "Density2017"),
options = layersControlOptions(collapsed = FALSE))
setwd('/home/nicole/Data Science/exam_big_data')
saveWidget(m, 'm.html', selfcontained = TRUE)
leaflet(prova) %>%
addProviderTiles("OpenStreetMap.BlackAndWhite", group="Black&White") %>%
addProviderTiles("Esri.NatGeoWorldMap", group = "NatGeo") %>%
addProviderTiles("MapQuestOpen.Aerial", group = "Aerial")%>%
addLayersControl(
baseGroups = c("Black&White", "NatGeo", "Aerial"),
overlayGroups = df$Time,
options = layersControlOptions(collapsed = FALSE))
leaflet(prova) %>%
addProviderTiles("OpenStreetMap.BlackAndWhite", group="Black&White") %>%
addProviderTiles("Esri.NatGeoWorldMap", group = "NatGeo") %>%
addProviderTiles("MapQuestOpen.Aerial", group = "Aerial")%>%
addLayersControl(
baseGroups = c("Density1990", "Density2017"),
#overlayGroups = prova$Time,
options = layersControlOptions(collapsed = FALSE))
View(prova)
m <- m %>% addLayersControl(baseGroups = c("Density1990", "Density2017"),
#overlayGroups = c("Density1990", "Density2017"),
options = layersControlOptions(collapsed = FALSE)) %>%
addMarkers(data=prova$Density1990,# icon = ~ milIcons[df.Icon],
#group=”9:30 to 10:15 a.m.”,
popup = ~ df.Unit) %>%
addMarkers(data=prova$Density2017,# icon = ~ milIcons[df.Icon],
#group=”10:15 to 10:45 a.m.”,
popup = ~ df.Unit)
m <- m %>% addLayersControl(baseGroups = c("Density1990", "Density2017"),
#overlayGroups = c("Density1990", "Density2017"),
options = layersControlOptions(collapsed = FALSE)) %>%
addMarkers(data=de$Density1990,# icon = ~ milIcons[df.Icon],
#group=”9:30 to 10:15 a.m.”,
popup = ~ df.Unit) %>%
addMarkers(data=de$Density2017,# icon = ~ milIcons[df.Icon],
#group=”10:15 to 10:45 a.m.”,
popup = ~ df.Unit)
m <- m %>% addLayersControl(baseGroups = c("Density1990", "Density2017"),
#overlayGroups = c("Density1990", "Density2017"),
options = layersControlOptions(collapsed = FALSE))
m
source('~/.active-rstudio-document', echo=TRUE)
?knitr::include_url()
knit_with_parameters('~/Data Science/exam_big_data/Presentation.Rmd')
rmarkdown::shiny_prerendered_clean('prova.Rpres')
knitr::opts_chunk$set(echo = TRUE)
logit <- logisticsim(x = seq(0, 1, length=100), seed=123)
knitr::opts_chunk$set(echo = TRUE)
library(DAAG)
library(MASS)
logit <- logisticsim(x = seq(0, 1, length=100), seed=123)
plot(logit)
model_logit <- glm(logit$y~logit$x,family=binomial(logit))
summary(model_logit)
coef_lo <- model_logit$coefficients
curve(exp(coef_lo[1]+coef_lo[2]*x)/(1+exp(coef_lo[1]+coef_lo[2]*x)), add=T,col=2)
# predicting from the model
set.seed(123)
pred <- predict(model_logit, type="response")
classific <- ifelse(pred>0.5, 1, 0)
#new simulation
new_sim <- logisticsim(x = seq(0, 1, length=100), a = 2, b = -4, seed=234)
confusion(classific, logit$y)
confusion(classific, new_sim$y)
logit2 <- logisticsim(x = seq(0, 1, length=100), a=coef_lo[1], b=coef_lo[2], seed=123)
plot(logit, col=2)
points(logit2, col=4, add=T)
confusion(logit$y, logit2$y)
pois <- poissonsim()
plot(pois, main="Poisson regression")
model_pois <- glm(pois$y~pois$x,family=poisson)
summary(model_pois)
coef_pois <- model_pois$coefficients
curve(exp(coef_pois[1]+coef_pois[2]*x),col=4,add=T)
set.seed(123)
pois2 <- poissonsim(a=2, b=-4, slope.sd=5)
model_pois2 <- glm(pois2$y~pois2$x,family=poisson)
model_quasipois <- glm(pois2$y~pois2$x,family=quasipoisson)
summary(model_pois2)
summary(model_quasipois)
coef_pois2 <- coef(model_pois2)
coef_quasi <- coef(model_quasipois)
plot(pois2)
curve(exp(coef_pois2[1]+coef_pois2[2]*x),col=4,add=T)
curve(exp(coef_quasi[1]+coef_quasi[2]*x),col=2,add=T)
nihills.lm <- lm(time ~ dist+climb, data=nihills)
summary(nihills.lm)
par(mfrow=c(2,2), oma=c(0,0,0,0), mar=c(2,2,2,1))
plot(nihills.lm)
n <- nrow(nihills)
param <- 2
ifelse(as.matrix(hatvalues(nihills.lm))>(2*param/n), "yes", "no")
nihills2.lm <- lm(time ~ dist+climb+dist:climb, data=nihills)
summary(nihills2.lm)
par(mfrow=c(2,2), oma=c(0,0,0,0), mar=c(2,2,2,1))
plot(nihills2.lm)
anova(nihills.lm, nihills2.lm)
outs <- car::influencePlot(nihills.lm)
n <- 3
Cooksdist <-row.names(outs[order(outs$CookD), ])
print(Cooksdist)
nihills_clean <- nihills[-c(10,17,19),]
n <- 3
Cooksdist <-row.names(outs[order(outs$CookD), ])
print(Cooksdist)
nihills_clean <- nihills[-c(10,17,19),]
nihills_clean.lm <- lm(time ~ dist+climb, data=nihills_clean)
par(mfrow=c(2,2), oma=c(0,0,0,0), mar=c(2,2,2,1))
plot(nihills_clean.lm)
anova(nihills_clean.lm, nihills2_clean.lm)
setwd('/home/nicole/Data Science/exam_big_data')
pop <- read.csv("Clean/population_clean.csv", skip=4)
setwd('/home/nicole/Data Science/exam_big_data')
pop <- read.csv("Clean/population_clean.csv", skip=4)
View(pop)
pop <- read.csv("Clean/population_clean.csv")
View(pop)
w <- pop %>%
filter(COuntry=="World")
library(dplyr)
w <- pop %>%
filter(COuntry=="World")
w <- pop %>%
filter(Country=="World")
View(w)
pop <- read.csv("Clean/population.csv", skip=4)
pop <- read.csv("Datasets/total_population.csv", skip=4)
w <- pop %>%
filter(Country=="World")
w <- pop %>%
filter(Country.Name=="World")
View(w)
colnames(w) <- c("Country", "Country.Code", "Indicator.Name", "Indicator.Code", substring(colnames(w[,6:length(w)-1]), 2), "X")
w <- pop %>%
filter(Country.Name=="World")%>%
select(- c("Country", "Country.Code", "Indicator.Name", "Indicator.Code"))
w <- pop %>%
filter(Country.Name=="World")%>%
select(-c("Country", "Country.Code", "Indicator.Name", "Indicator.Code"))
w <- pop %>%
filter(Country.Name=="World")%>%
select(-"Country",- "Country.Code", -"Indicator.Name", -"Indicator.Code")
w <- pop %>%
filter(Country.Name=="World")%>%
select(-Country.Name)
w <- pop %>%
filter(Country.Name=="World")%>%
select(-Country.Name, -Country.Code, -Indicator.Name, -Indicator.Code)
colnames(w) <- c(substring(colnames(w[,6:length(w)-1]), 2), "X")
colanems(w)
colnaems(w)
colnames(w)
w <- pop %>%
filter(Country.Name=="World")%>%
select(-Country.Name, -Country.Code, -Indicator.Name, -Indicator.Code)
colnames(w) <- c(substring(colnames(w[,6:length(w)-1]), 2), "X")
colnames(w)
colnames(w) <- c(substring(colnames(w[,1:length(w)-1]), 2), "X")
colnames(w)
w <- pop %>%
filter(Country.Name=="World")%>%
select(-Country.Name, -Country.Code, -Indicator.Name, -Indicator.Code)
colnames(w) <- c(substring(colnames(w[,1:length(w)-1]), 2), "X")
colnames(w)
w <- pop %>%
filter(Country.Name=="World")%>%
select(-Country.Name, -Country.Code, -Indicator.Name, -Indicator.Code, -X)
colnames(w) <- c(substring(colnames(w[,1:length(w)-1]), 2), "X")
colnames(w)
w <- pop %>%
filter(Country.Name=="World")%>%
select(-Country.Name, -Country.Code, -Indicator.Name, -Indicator.Code, -X)
colnames(w) <- c(substring(colnames(w[,1:length(w)-1]), 2), "X")
colnames(w)
w <- pop %>%
filter(Country.Name=="World")%>%
select(-Country.Name, -Country.Code, -Indicator.Name, -Indicator.Code, -X)
colnames(w) <- c(substring(colnames(w[,1:length(w)]), 2), "X")
colnames(w[,1:length(w)])
colnames(w)
w <- pop %>%
filter(Country.Name=="World")%>%
select(-Country.Name, -Country.Code, -Indicator.Name, -Indicator.Code, -X)
colnames(w) <- c(substring(colnames(w[,1:length(w)]), 2), "X")
colnames(w)
w <- pop %>%
filter(Country.Name=="World")%>%
select(-Country.Name, -Country.Code, -Indicator.Name, -Indicator.Code, -X)
colnames(w)
length(colnames(w))
1:length(w)
w[,1:length(w)]
colnames(w[,1:length(w)]), 2)
colnames(w[,1:length(w)])
substring(colnames(w[,1:length(w)]), 2)
colnames(w) <- c(substring(colnames(w[,1:length(w)]), 2)(#), "X")
colnames(w)
colnames(w) <- c(substring(colnames(w[,1:length(w)]), 2))#), "X")
w <- pop %>%
filter(Country.Name=="World")%>%
select(-Country.Name, -Country.Code, -Indicator.Name, -Indicator.Code, -X)
colnames(w) <- c(substring(colnames(w[,1:length(w)]), 2))#), "X")
colnames(w)
w[2,]<- colnames(w)
?lm
data.frame(t(w))
w2 <- data.frame(t(w))
View(w2)
colanmes(w2) <- c("world pop", "year")
colnames(w2) <- c("world pop", "year")
lm(world_pop ~ year, w2)
colnames(w2) <- c("world_pop", "year")
lm(world_pop ~ year, w2)
w2$world_pop <- as.numeric(w2$world_pop)
w <- pop %>%
filter(Country.Name=="World")%>%
select(-Country.Name, -Country.Code, -Indicator.Name, -Indicator.Code, -X)
colnames(w) <- c(substring(colnames(w[,1:length(w)]), 2))
colnames(w)
w[2,]<- colnames(w)
w2 <- data.frame(t(w))
colnames(w2) <- c("world_pop", "year")
w2$world_pop <- as.numeric(unlist(w2$world_pop))
pop <- read.csv("Datasets/total_population.csv", skip=4)
w <- pop %>%
filter(Country.Name=="World")%>%
select(-Country.Name, -Country.Code, -Indicator.Name, -Indicator.Code, -X)
colnames(w) <- c(substring(colnames(w[,1:length(w)]), 2))
colnames(w)
w[2,]<- colnames(w)
w2 <- data.frame(t(w))
colnames(w2) <- c("world_pop", "year")
c <- w2
c$world_pop <- as.numeric(unfactor(c$world_pop))
c <- w2
c$world_pop <- as.numeric(as.character(c$world_pop))
View(c)
c$year <- as.numeric(as.character(c$year))
w2$world_pop <- as.numeric(as.character(w2$world_pop))
w2$year <- as.numeric(as.character(w2$year))
lm(world_pop ~ year, w2)
?predict
mod <- lm(world_pop ~ year, w2)
predict(mod)
years <- seq(2018:2050)
years
?seq7
?seq
years <- seq(2018,2050)
years
predict(mod, years)
year <- seq(2018,2050)
predict(mod, year)
year <- data.frame(year)
View(year)
predict(mod, year)
summary(mod)
p <- predict(mod, year)
summary(p)
predict(mod, year)
put <- predict(mod, year)
out <- predict(mod, year)
out <- data.frame(out)
View(pop)
View(out)
year$newcol <- data.frame(out)
View(w2)
model <- glm(world_pop ~ year, w2)
10143348452 7530360149?glm
?glm
model <- glm(world_pop ~ year, w2, family=binomial(link = "logit"))
logit <- logisticsim(x = seq(0, 1, length=100), seed=123)
plot(logit)
model_pois <- glm(world_pop ~ year, w2, family=poisson)
model_pois <- glm(world_pop ~ year, w2, family=poisson(link = "logit"))
summary(model_pois)
out <- predict(model_pois, year)
year$poisson <- data.frame(out)
View(year)
?glm
model_pois <- glm(world_pop ~ year, w2, family=gaussian)
summary(model_pois)
out <- predict(model_pois, year)
year$gaus <- data.frame(out)
install.packages("splines2")
lirary(splines)
library(splines)
