})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "World population"),
dashboardSidebar(sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", tabName = "widgets", icon = icon("th"))
)),
dashboardBody(
tabItems(
tabItem(tabName = "dashboard",
# Boxes need to be put in a row (or column)
fluidRow(
box(title = "Plot",
background = "maroon", solidHeader = TRUE,
plotOutput("plot1", height=250)),
box(
title = "Controls", #background = "black",
selectInput(inputId = "x2", label = "x-axis: Population",
choices = c("1960" = "X1960",
"1970" = "X1970",
"1980" = "X1980",
"1990" = "X1990",
"2000" = "X2000",
"2010" = "X2010",
"2017" = "X2017"),
selected = "1960"),
selectInput(inputId = "y2", label = "Y-axis: Area",
choices = c("Area", "logArea"),
selected = "Area"),
selectInput(inputId = "z2",label = "Color by:",
choices = c("Continent", "Region"),
selected = "Continent"),
checkboxGroupInput(inputId = "selected_continent",
label = "Select Continent:",
choices = c("Europe", "Africa", "Asia", "Oceania", "America"),
selected = c("Europe", "Africa", "Asia", "Oceania", "America"))
)# closed box
) # closed fluidrow
), # closed tabitem
# Second tab content
tabItem(tabName = "widgets",
h2("Widgets tab content")
)
)
)
)
server <- function(input, output) {
population_subset <- reactive({
req(input$selected_continent)
filter(population, Continent %in% input$selected_continent)
})
output$plot1 <- renderPlot({
ggplot(population_subset(), aes_string(x = input$x2, y = input$y2, color = input$z2)) +
geom_point()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "World population"),
dashboardSidebar(sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", tabName = "widgets", icon = icon("th"))
)),
dashboardBody(
tabItems(
tabItem(tabName = "dashboard",
# Boxes need to be put in a row (or column)
fluidRow(
box(title = "Plot",
background = "maroon", solidHeader = TRUE,
plotOutput("plot1", height=250)),
box(
title = "Controls", width=4,#background = "black",
selectInput(inputId = "x2", label = "x-axis: Population",
choices = c("1960" = "X1960",
"1970" = "X1970",
"1980" = "X1980",
"1990" = "X1990",
"2000" = "X2000",
"2010" = "X2010",
"2017" = "X2017"),
selected = "1960"),
selectInput(inputId = "y2", label = "Y-axis: Area",
choices = c("Area", "logArea"),
selected = "Area"),
selectInput(inputId = "z2",label = "Color by:",
choices = c("Continent", "Region"),
selected = "Continent"),
checkboxGroupInput(inputId = "selected_continent",
label = "Select Continent:",
choices = c("Europe", "Africa", "Asia", "Oceania", "America"),
selected = c("Europe", "Africa", "Asia", "Oceania", "America"))
)# closed box
) # closed fluidrow
), # closed tabitem
# Second tab content
tabItem(tabName = "widgets",
h2("Widgets tab content")
)
)
)
)
server <- function(input, output) {
population_subset <- reactive({
req(input$selected_continent)
filter(population, Continent %in% input$selected_continent)
})
output$plot1 <- renderPlot({
ggplot(population_subset(), aes_string(x = input$x2, y = input$y2, color = input$z2)) +
geom_point()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "World population"),
dashboardSidebar(sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", tabName = "widgets", icon = icon("th"))
)),
dashboardBody(
tabItems(
tabItem(tabName = "dashboard",
# Boxes need to be put in a row (or column)
fluidRow(
box(title = "Plot", width=8,
background = "maroon", solidHeader = TRUE,
plotOutput("plot1", height=250)),
box(
title = "Controls", width=4,#background = "black",
selectInput(inputId = "x2", label = "x-axis: Population",
choices = c("1960" = "X1960",
"1970" = "X1970",
"1980" = "X1980",
"1990" = "X1990",
"2000" = "X2000",
"2010" = "X2010",
"2017" = "X2017"),
selected = "1960"),
selectInput(inputId = "y2", label = "Y-axis: Area",
choices = c("Area", "logArea"),
selected = "Area"),
selectInput(inputId = "z2",label = "Color by:",
choices = c("Continent", "Region"),
selected = "Continent"),
checkboxGroupInput(inputId = "selected_continent",
label = "Select Continent:",
choices = c("Europe", "Africa", "Asia", "Oceania", "America"),
selected = c("Europe", "Africa", "Asia", "Oceania", "America"))
)# closed box
) # closed fluidrow
), # closed tabitem
# Second tab content
tabItem(tabName = "widgets",
h2("Widgets tab content")
)
)
)
)
server <- function(input, output) {
population_subset <- reactive({
req(input$selected_continent)
filter(population, Continent %in% input$selected_continent)
})
output$plot1 <- renderPlot({
ggplot(population_subset(), aes_string(x = input$x2, y = input$y2, color = input$z2)) +
geom_point()
})
}
shinyApp(ui, server)
?box
ui <- dashboardPage(
dashboardHeader(title = "World population"),
dashboardSidebar(sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", tabName = "widgets", icon = icon("th"))
)),
dashboardBody(
tabItems(
tabItem(tabName = "dashboard",
# Boxes need to be put in a row (or column)
fluidRow(
box(title = "Plot", width=8,
background = "aqua", solidHeader = TRUE,
plotOutput("plot1", height=300)),
box(
title = "Controls", width=4,#background = "black",
selectInput(inputId = "x2", label = "x-axis: Population",
choices = c("1960" = "X1960",
"1970" = "X1970",
"1980" = "X1980",
"1990" = "X1990",
"2000" = "X2000",
"2010" = "X2010",
"2017" = "X2017"),
selected = "1960"),
selectInput(inputId = "y2", label = "Y-axis: Area",
choices = c("Area", "logArea"),
selected = "Area"),
selectInput(inputId = "z2",label = "Color by:",
choices = c("Continent", "Region"),
selected = "Continent"),
checkboxGroupInput(inputId = "selected_continent",
label = "Select Continent:",
choices = c("Europe", "Africa", "Asia", "Oceania", "America"),
selected = c("Europe", "Africa", "Asia", "Oceania", "America"))
)# closed box
) # closed fluidrow
), # closed tabitem
# Second tab content
tabItem(tabName = "widgets",
h2("Widgets tab content")
)
)
)
)
server <- function(input, output) {
population_subset <- reactive({
req(input$selected_continent)
filter(population, Continent %in% input$selected_continent)
})
output$plot1 <- renderPlot({
ggplot(population_subset(), aes_string(x = input$x2, y = input$y2, color = input$z2)) +
geom_point()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "World population"),
dashboardSidebar(sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", tabName = "widgets", icon = icon("th"))
)),
dashboardBody(
tabItems(
tabItem(tabName = "dashboard",
# Boxes need to be put in a row (or column)
fluidRow(
box(title = "Plot", width=8, status="primary Blue",
background = "aqua", solidHeader = TRUE,
plotOutput("plot1", height=300)),
box(
title = "Controls", width=4,#background = "black",
selectInput(inputId = "x2", label = "x-axis: Population",
choices = c("1960" = "X1960",
"1970" = "X1970",
"1980" = "X1980",
"1990" = "X1990",
"2000" = "X2000",
"2010" = "X2010",
"2017" = "X2017"),
selected = "1960"),
selectInput(inputId = "y2", label = "Y-axis: Area",
choices = c("Area", "logArea"),
selected = "Area"),
selectInput(inputId = "z2",label = "Color by:",
choices = c("Continent", "Region"),
selected = "Continent"),
checkboxGroupInput(inputId = "selected_continent",
label = "Select Continent:",
choices = c("Europe", "Africa", "Asia", "Oceania", "America"),
selected = c("Europe", "Africa", "Asia", "Oceania", "America"))
)# closed box
) # closed fluidrow
), # closed tabitem
# Second tab content
tabItem(tabName = "widgets",
h2("Widgets tab content")
)
)
)
)
server <- function(input, output) {
population_subset <- reactive({
req(input$selected_continent)
filter(population, Continent %in% input$selected_continent)
})
output$plot1 <- renderPlot({
ggplot(population_subset(), aes_string(x = input$x2, y = input$y2, color = input$z2)) +
geom_point()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "World population"),
dashboardSidebar(sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", tabName = "widgets", icon = icon("th"))
)),
dashboardBody(
tabItems(
tabItem(tabName = "dashboard",
# Boxes need to be put in a row (or column)
fluidRow(
box(title = "Plot", width=8, status="primary Blue",
background = "navy", solidHeader = TRUE,
plotOutput("plot1", height=300)),
box(
title = "Controls", width=4,#background = "black",
selectInput(inputId = "x2", label = "x-axis: Population",
choices = c("1960" = "X1960",
"1970" = "X1970",
"1980" = "X1980",
"1990" = "X1990",
"2000" = "X2000",
"2010" = "X2010",
"2017" = "X2017"),
selected = "1960"),
selectInput(inputId = "y2", label = "Y-axis: Area",
choices = c("Area", "logArea"),
selected = "Area"),
selectInput(inputId = "z2",label = "Color by:",
choices = c("Continent", "Region"),
selected = "Continent"),
checkboxGroupInput(inputId = "selected_continent",
label = "Select Continent:",
choices = c("Europe", "Africa", "Asia", "Oceania", "America"),
selected = c("Europe", "Africa", "Asia", "Oceania", "America"))
)# closed box
) # closed fluidrow
), # closed tabitem
# Second tab content
tabItem(tabName = "widgets",
h2("Widgets tab content")
)
)
)
)
server <- function(input, output) {
population_subset <- reactive({
req(input$selected_continent)
filter(population, Continent %in% input$selected_continent)
})
output$plot1 <- renderPlot({
ggplot(population_subset(), aes_string(x = input$x2, y = input$y2, color = input$z2)) +
geom_point()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "World population"),
dashboardSidebar(sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", tabName = "widgets", icon = icon("th"))
)),
dashboardBody(
tabItems(
tabItem(tabName = "dashboard",
# Boxes need to be put in a row (or column)
fluidRow(
box(title = "Plot", width=8, #status="primary Blue",
background = "lime", solidHeader = TRUE,
plotOutput("plot1", height=300)),
box(
title = "Controls", width=4,#background = "black",
selectInput(inputId = "x2", label = "x-axis: Population",
choices = c("1960" = "X1960",
"1970" = "X1970",
"1980" = "X1980",
"1990" = "X1990",
"2000" = "X2000",
"2010" = "X2010",
"2017" = "X2017"),
selected = "1960"),
selectInput(inputId = "y2", label = "Y-axis: Area",
choices = c("Area", "logArea"),
selected = "Area"),
selectInput(inputId = "z2",label = "Color by:",
choices = c("Continent", "Region"),
selected = "Continent"),
checkboxGroupInput(inputId = "selected_continent",
label = "Select Continent:",
choices = c("Europe", "Africa", "Asia", "Oceania", "America"),
selected = c("Europe", "Africa", "Asia", "Oceania", "America"))
)# closed box
) # closed fluidrow
), # closed tabitem
# Second tab content
tabItem(tabName = "widgets",
h2("Widgets tab content")
)
)
)
)
server <- function(input, output) {
population_subset <- reactive({
req(input$selected_continent)
filter(population, Continent %in% input$selected_continent)
})
output$plot1 <- renderPlot({
ggplot(population_subset(), aes_string(x = input$x2, y = input$y2, color = input$z2)) +
geom_point()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "World population"),
dashboardSidebar(sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", tabName = "widgets", icon = icon("th"))
)),
dashboardBody(
tabItems(
tabItem(tabName = "dashboard",
# Boxes need to be put in a row (or column)
fluidRow(
box(title = "Plot", width=8, #status="primary Blue",
background = "navy", solidHeader = TRUE,
plotOutput("plot1", height=300)),
box(
title = "Controls", width=4,#background = "black",
selectInput(inputId = "x2", label = "x-axis: Population",
choices = c("1960" = "X1960",
"1970" = "X1970",
"1980" = "X1980",
"1990" = "X1990",
"2000" = "X2000",
"2010" = "X2010",
"2017" = "X2017"),
selected = "1960"),
selectInput(inputId = "y2", label = "Y-axis: Area",
choices = c("Area", "logArea"),
selected = "Area"),
selectInput(inputId = "z2",label = "Color by:",
choices = c("Continent", "Region"),
selected = "Continent"),
checkboxGroupInput(inputId = "selected_continent",
label = "Select Continent:",
choices = c("Europe", "Africa", "Asia", "Oceania", "America"),
selected = c("Europe", "Africa", "Asia", "Oceania", "America"))
)# closed box
) # closed fluidrow
), # closed tabitem
# Second tab content
tabItem(tabName = "widgets",
h2("Widgets tab content")
)
)
)
)
server <- function(input, output) {
population_subset <- reactive({
req(input$selected_continent)
filter(population, Continent %in% input$selected_continent)
})
output$plot1 <- renderPlot({
ggplot(population_subset(), aes_string(x = input$x2, y = input$y2, color = input$z2)) +
geom_point()
})
}
shinyApp(ui, server)
{
{
ui <- dashboardPage(
dashboardHeader(title = "World population"),
dashboardSidebar(sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", tabName = "widgets", icon = icon("th"))
)),
dashboardBody(
tabItems(
tabItem(tabName = "dashboard",
# Boxes need to be put in a row (or column)
fluidRow(
box(title = "Plot", width=6, #status="primary Blue",
background = "navy", solidHeader = TRUE,
plotOutput("plot1", height=300)),
box(
title = "Controls", width=4,#background = "black",
selectInput(inputId = "x2", label = "x-axis: Population",
choices = c("1960" = "X1960",
"1970" = "X1970",
"1980" = "X1980",
"1990" = "X1990",
"2000" = "X2000",
"2010" = "X2010",
"2017" = "X2017"),
selected = "1960"),
selectInput(inputId = "y2", label = "Y-axis: Area",
choices = c("Area", "logArea"),
selected = "Area"),
selectInput(inputId = "z2",label = "Color by:",
choices = c("Continent", "Region"),
selected = "Continent"),
checkboxGroupInput(inputId = "selected_continent",
label = "Select Continent:",
choices = c("Europe", "Africa", "Asia", "Oceania", "America"),
selected = c("Europe", "Africa", "Asia", "Oceania", "America"))
)# closed box
) # closed fluidrow
), # closed tabitem
# Second tab content
tabItem(tabName = "widgets",
h2("Widgets tab content")
)
)
)
)
server <- function(input, output) {
population_subset <- reactive({
req(input$selected_continent)
filter(population, Continent %in% input$selected_continent)
})
output$plot1 <- renderPlot({
ggplot(population_subset(), aes_string(x = input$x2, y = input$y2, color = input$z2)) +
geom_point()
})
}
shinyApp(ui, server)
stop
qq
