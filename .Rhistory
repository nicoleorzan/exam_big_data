mapCountryData(PoverMap, nameColumnToPlot="poverty", catMethod = "categorical",
missingCountryCol = gray(.8))
library(rgl)
attach(countries_world)
plot3d(Density, Area, Population, col="red", size=3)
detach(countries_world)
#####################################################
####### WORLD PLOT TOTAL POPULATION ANALYSIS ########
####### PERCENTAGE OF GROWTH FOR EVERY YEAR:
worldpop <- total_population %>%
filter(Country=="World")
growth <- gather(worldpop, "year", "WorldPopulation", 5:ncol(worldpop)) %>%
select(-Continent, -Region, -Country.Code) %>%
filter(year != "X1960") %>%
mutate(percentage_growth = (WorldPopulation-lag(WorldPopulation))/lag(WorldPopulation)*100) %>%
select(-Country)
ggplot(growth, aes(x=year, y=percentage_growth))+geom_point()
png(filename="/home/nicole/Data Science/Exam_data_analysis/pop_growth.png",width=550,height=400)
ggplot(growth, aes(x=year, y=percentage_growth, color=percentage_growth)) +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))+
scale_x_discrete(breaks=seq(1960, 2017, 5))+
geom_point()+
theme(legend.position="none")+
labs(x = "Year", y="Growth Percentage", title="Growth Percentage of the World Population")+
theme(plot.title = element_text(size=22), axis.title.x = element_text(size=20),
axis.title.y = element_text(size=20), axis.text=element_text(size=12))
dev.off()
png(filename="/home/nicole/Data Science/Exam_data_analysis/pop_number.png",width=550,height=400)
ggplot(growth, aes(x=year, y=WorldPopulation))+geom_point()#, color=WorldPopulation)) #+
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))+
scale_x_discrete(breaks=seq(1960, 2017, 5))+
geom_point()+
theme(legend.position="none")+
labs(x = "Year", y="Population", title="Total World Population")+
theme(plot.title = element_text(size=22), axis.title.x = element_text(size=20),
axis.title.y = element_text(size=20), axis.text=element_text(size=12))
dev.off()
#####################################
#####################################
# MORLD MAP IN YEARS 1960, 2017
totpopDF <- data.frame(country = total_population$Country.Code, Population1960 = total_population$`1960`)
totpopMap <- joinCountryData2Map(totpopDF, joinCode = "ISO3",nameJoinColumn = "country")
library(RColorBrewer)
colourPale <- brewer.pal(6, 'YlOrBr')
mapCountryData(totpopMap, nameColumnToPlot="Population1960", catMethod = "logFixedWidth",
missingCountryCol = gray(.8), colourPalette=colourPale)
mapCountryData(totpopMap, mapRegion='africa', nameColumnToPlot="Population1960", catMethod = "logFixedWidth",
missingCountryCol = gray(.8), numCats=10, colourPalette = "terrain")
###### 2017
totpopDF2017 <- data.frame(country = total_population$Country.Code, Population2017 = total_population$X2017)
totpopMap2017 <- joinCountryData2Map(totpopDF2017, joinCode = "ISO3",nameJoinColumn = "country")
mapCountryData(totpopMap2017, nameColumnToPlot="Population2017", catMethod = "logFixedWidth",
missingCountryCol = gray(.8), numCats=10, colourPalette = "terrain")
mapCountryData(totpopMap2017, mapRegion='africa', nameColumnToPlot="Population2017", catMethod = "logFixedWidth",
missingCountryCol = gray(.8), numCats=10, colourPalette = "terrain")
# DA QUI VA
states <- geojsonio::geojson_read("prova.geo.json", what = "sp")
class(states)
names(states)
m <- leaflet(states) %>%
setView(-1, 42, zoom=1) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
m %>% addPolygons()
ggplot(data=early_years, aes(x=A, y=c(B)) )+
geom_line()+
geom_point()
ggplot(data=early_years, aes(x=A, y=c(B), group=1) )+
geom_line()+
geom_point()
early_years <- read.ods("Datasets/before.ods")
{countries_world <- read.csv("Datasets/countries of the world.csv", na.strings=c("","NA"))
colnames(countries_world)[4]="Area"
colnames(countries_world)[5]="Density"
countries_world[,2] <- str_trim(countries_world[,2], "both")
#MPI_national <- read.csv("MPI_national.csv")
##MPI_subnational <- read.csv("MPI_subnational.csv")
immunization <- read.csv("Datasets/immunization.csv", skip=4)
death <- read.csv("Datasets/death_rate.csv", skip=4)
Gdp <- read.csv("Datasets/GDP_annual_growth.csv", skip=4)
total_population <- read.csv("Datasets/total_population.csv", skip=4)
early_years <- read.ods("Datasets/before.ods")
}
early_years <- data.frame(early_years)
early_years <- early_years[2:nrow(early_years),]
ggplot(data=early_years, aes(x=A, y=c(B), group=1) )+
geom_line()+
geom_point()
ggplot(data=early_years, aes(x=A, y=B, group=1) )+
geom_line()+
geom_point()
early_years <- read.ods("Datasets/before.ods")
early_years <- data.frame(early_years)
early_years <- early_years[2:nrow(early_years),]
ggplot(data=early_years, aes(x=A, y=B, group=1) )+
geom_line()+
geom_point()
ggplot(data=early_years, aes(x=A, y=B) )+
geom_line()+
geom_point()
early_years <- read.ods("Datasets/before.ods")
{countries_world <- read.csv("Datasets/countries of the world.csv", na.strings=c("","NA"))
colnames(countries_world)[4]="Area"
colnames(countries_world)[5]="Density"
countries_world[,2] <- str_trim(countries_world[,2], "both")
#MPI_national <- read.csv("MPI_national.csv")
##MPI_subnational <- read.csv("MPI_subnational.csv")
immunization <- read.csv("Datasets/immunization.csv", skip=4)
death <- read.csv("Datasets/death_rate.csv", skip=4)
Gdp <- read.csv("Datasets/GDP_annual_growth.csv", skip=4)
total_population <- read.csv("Datasets/total_population.csv", skip=4)
early_years <- read.ods("Datasets/before.ods")
}
early_years <- data.frame(early_years)
early_years <- early_years[2:nrow(early_years),1:2]
ggplot(data=early_years, aes(x=A, y=B) )+
geom_line()+
geom_point()
ggplot(data=early_years, aes(x=A, y=B) , group=1)+
geom_line()+
geom_point()
ggplot(data=early_years, aes(x=A, y=B, group=1))+
geom_line()+
geom_point()
ggplot(data=early_years, aes(x=A, y=B, group=1))+
geom_line()+
geom_point()+geom_path()
ggplot(data=early_years, aes(x=A, y=B, group=1))+
geom_point()+geom_path()
early_years <- read.ods("Datasets/before.ods")
early_years <- data.frame(early_years)
early_years <- early_years[2:nrow(early_years),1:2]
ggplot(data=early_years, aes(x=A, y=B, group=1))+
geom_line()+
geom_point()
early_years <- read.ods("Datasets/before.ods")
early_years <- data.frame(early_years)
early_years <- early_years[2:nrow(early_years),1:2]
ggplot(data=early_years, aes(x=A, y=B, group=1))+
geom_line()+
geom_point()
early_years <- read.ods("Datasets/before.ods")
early_years <- data.frame(early_years)
early_years <- early_years[2:nrow(early_years),1:2]
ggplot(data=early_years, aes(x=A, y=B, group=1))+
geom_line()+
geom_point()
early_years <- read.ods("Datasets/before.ods")
early_years <- data.frame(early_years)
early_years <- early_years[2:nrow(early_years),1:2]
ggplot(data=early_years, aes(x=A, y=B, group=1))+
geom_line()+
geom_point()
early_years[,2]
as.numbers(early_years[,2])
as.number(early_years[,2])
as.integer(early_years[,2])
early_years[,2] <- as.integer(early_years[,2])
ggplot(data=early_years, aes(x=A, y=B, group=1))+
geom_line()+
geom_point()
early_years <- read.ods("Datasets/before.ods")
{countries_world <- read.csv("Datasets/countries of the world.csv", na.strings=c("","NA"))
colnames(countries_world)[4]="Area"
colnames(countries_world)[5]="Density"
countries_world[,2] <- str_trim(countries_world[,2], "both")
#MPI_national <- read.csv("MPI_national.csv")
##MPI_subnational <- read.csv("MPI_subnational.csv")
immunization <- read.csv("Datasets/immunization.csv", skip=4)
death <- read.csv("Datasets/death_rate.csv", skip=4)
Gdp <- read.csv("Datasets/GDP_annual_growth.csv", skip=4)
total_population <- read.csv("Datasets/total_population.csv", skip=4)
early_years <- read.ods("Datasets/before.ods")
}
early_years <- data.frame(early_years)
early_years <- early_years[2:nrow(early_years),1:2]
early_years[,2] <- as.integer(early_years[,2])
early_years <- read.ods("Datasets/before.ods")
early_years <- data.frame(early_years)
early_years <- early_years[2:nrow(early_years),1:2]
early_years[,2] <- as.integer(early_years[,2])
early_years[,1] <- as.integer(early_years[,1])
early_years[,2] <- as.integer(early_years[,2])
ggplot(data=early_years, aes(x=A, y=B, group=1))+
geom_line()+
geom_point()
early_years <- read.ods("Datasets/before.ods")
{countries_world <- read.csv("Datasets/countries of the world.csv", na.strings=c("","NA"))
colnames(countries_world)[4]="Area"
colnames(countries_world)[5]="Density"
countries_world[,2] <- str_trim(countries_world[,2], "both")
#MPI_national <- read.csv("MPI_national.csv")
##MPI_subnational <- read.csv("MPI_subnational.csv")
immunization <- read.csv("Datasets/immunization.csv", skip=4)
death <- read.csv("Datasets/death_rate.csv", skip=4)
Gdp <- read.csv("Datasets/GDP_annual_growth.csv", skip=4)
total_population <- read.csv("Datasets/total_population.csv", skip=4)
early_years <- read.ods("Datasets/before.ods")
}
early_years <- data.frame(early_years)
early_years <- early_years[2:nrow(early_years),1:2]
early_years[,1] <- as.integer(early_years[,1])
early_years[,2] <- as.integer(early_years[,2])
ggplot(data=early_years, aes(x=A, y=B, group=1))+
geom_line()+
geom_point()
ggplot(data=early_years, aes(x=A, y=B, group=1))+
geom_line()+
geom_point()+
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))+
theme(axis.text=element_text(size=7))
ggplot(data=early_years, aes(x=A, y=B, group=1))+
geom_line()+
geom_point()+xlab("Years")
ggplot(data=early_years, aes(x=A, y=B, group=1))+
geom_line()+
geom_point()+xlab("Years")+ylab("Population")+theme_bw()
ggplot(data=early_years, aes(x=A, y=B, group=1))+
geom_line()+
geom_point()+xlab("Years")+ylab("Population")+theme_minimal()
early_years <- read.ods("Datasets/before.ods")
early_years <- data.frame(early_years)
early_years[,1] <- as.integer(early_years[,1])
early_years[,2] <- as.integer(early_years[,2])
early_years[,3] <- as.integer(early_years[,3])
early_years <- read.ods("Datasets/before.ods")
early_years <- data.frame(early_years)
early_years[,1] <- as.integer(early_years[,1])
early_years <- early_years[2:nrow(early_years),]
early_years[,1] <- as.integer(early_years[,1])
early_years[,2] <- as.integer(early_years[,2])
early_years[,3] <- as.integer(early_years[,3])
ggplot(data=early_years, aes(x=A))+
geom_line(aes(y = B, colour = "var0")) +
geom_line(aes(y = C, colour = "var1"))
ggplot(data=early_years, aes(x=A))+
geom_line(aes(y = B, "Lower Estimate")) +
geom_line(aes(y = C, "Upper Estimate"))
ggplot(data=early_years, aes(x=A))+
geom_line(aes(y = B, colour="Lower Estimate")) +
geom_line(aes(y = C, colour="Upper Estimate"))
ggplot(data=early_years, aes(x=A))+
geom_line(aes(y = B)) +
geom_line(aes(y = C)) +
geom_point()+xlab("Years")+ylab("Population")+theme_minimal()
ggplot(data=early_years, aes(x=A))+
geom_line(aes(y = B)) +
geom_line(aes(y = C)) + xlab("Years")+ylab("Population")+theme_minimal()
ggplot(data=early_years, aes(x=A))+
geom_line(aes(y = B, colour="a")) +
geom_line(aes(y = C, colour="b")) +
xlab("Years")+
ylab("Population")+theme_minimal()
ggplot(data=early_years, aes(x=A))+
geom_line(aes(y = B, c="Lowe Estimate")) +
geom_line(aes(y = C, c="b")) +
xlab("Years")+
ylab("Population")+theme_minimal()
ggplot(data=early_years, aes(x=A))+
geom_line(aes(y = B, c="Lower Estimate")) +
geom_line(aes(y = C, c="Upper Estimate")) +
xlab("Years")+
ylab("Population")+theme_minimal()
ggplot(data=early_years, aes(x=A))+
geom_line(aes(y = B, clour="Lower Estimate")) +
geom_line(aes(y = C, colour="Upper Estimate")) +
xlab("Years")+
ylab("Population")+theme_minimal()
o
ggplot(data=early_years, aes(x=A))+
geom_line(aes(y = B, colour="Lower Estimate")) +
geom_line(aes(y = C, colour="Upper Estimate")) +
xlab("Years")+
ylab("Population")+theme_minimal()
ggplot(data=early_years, aes(x=A))+
geom_line(aes(y = B, colour="red")) +
geom_line(aes(y = C, colour="blue")) +
xlab("Years")+
ylab("Population")+theme_minimal()
ggplot(data=early_years, aes(x=A))+
geom_line(aes(y = B, colour="Lower Estimate")) +
geom_line(aes(y = C, colour="Upper Estimate")) +
xlab("Years")+
ylab("Population")+theme_minimal()
ggplot(data=early_years, aes(x=A))+
geom_line(aes(y = B, colour="Lower Estimate")) +
geom_line(aes(y = C, colour="Upper Estimate")) +
xlab("Years")+
ylab("Population")+
theme_minimal()+ggtitle("Early Ages Population Estimation")
ggplot(data=early_years, aes(x=A))+
geom_line(aes(y = B, colour="Lower Estimate")) +
geom_line(aes(y = C, colour="Upper Estimate")) +
xlab("Years")+
ylab("Population")+
theme_minimal()+ggtitle("Early Ages Population Estimation", size=22)
?ggtitle
ggplot(data=early_years, aes(x=A))+
geom_line(aes(y = B, colour="Lower Estimate")) +
geom_line(aes(y = C, colour="Upper Estimate")) +
xlab("Years")+
ylab("Population")+
theme_minimal()+
ggtitle("Early Ages Population Estimation")
p <- plot_ly(early_years, x = ~A, y = ~B, name = 'trace 0', type = 'scatter', mode = 'lines') %>%
add_trace(y = ~C, name = 'trace 1', mode = 'lines+markers')
library(plotly)
p <- plot_ly(early_years, x = ~A, y = ~B, name = 'trace 0', type = 'scatter', mode = 'lines') %>%
add_trace(y = ~C, name = 'trace 1', mode = 'lines+markers')
chart_link = api_create(p, filename="line-mode1")
chart_link
chart_link = api_create(p, filename="line-mode1")
chart_link
knitr::opts_chunk$set(echo = TRUE)
library("knitr")
library("devtools")
library("knitr")
library("devtools")
url<-"https://plot.ly/~Niki23/132/#/"
plotly_iframe <- paste("<iframe scrolling='no' seamless='seamless' src='", url,
"/800/600' width='800' height='600'></iframe>", sep = "")
library(leaflet)
library(dplyr)
library(leaflet)
{
library(leaflet)
library(dplyr)
library(rgdal)
library(ggplot2)
library(geojsonio)
library(rworldmap)
library(countrycode)
library(tidyr)
library(stringr)
}
setwd('/home/nicole/Data Science/exam_big_data/Clean')
population2 <- read.csv("population_clean.csv")
population <- read.csv("population_clean_with_NAs.csv")
density2 <- read.csv("density_clean.csv")
density <- read.csv("density_clean_with_NAs.csv")
population <- density
colnames(population)[2] <- "name"
{
levels(population$name) <- c(levels(population$name), "United States of America")
population$name[population$name == 'United States'] <- "United States of America"
levels(population$name) <- c(levels(population$name), "Russia")
population$name[population$name == 'Russian Federation'] <- "Russia"
levels(population$name) <- c(levels(population$name), "Democratic Republic of the Congo")
population$name[population$name == "Congo, Dem. Rep."] <- "Democratic Republic of the Congo"
levels(population$name) <- c(levels(population$name), "Iran")
population$name[population$name == "Iran, Islamic Rep."] <- "Iran"
levels(population$name) <- c(levels(population$name), "Republic of Serbia")
population$name[population$name == "Serbia"] <- "Republic of Serbia"
levels(population$name) <- c(levels(population$name), "Egypt")
population$name[population$name == "Egypt, Arab Rep."] <- "Egypt"
levels(population$name) <- c(levels(population$name), "Venezuela")
population$name[population$name == 'Venezuela, RB'] <- "Venezuela"
levels(population$name) <- c(levels(population$name), "United Republic of Tanzania")
population$name[population$name == "Tanzania"] <- "United Republic of Tanzania"
levels(population$name) <- c(levels(population$name), "Yemen")
population$name[population$name == 'Yemen, Rep.'] <- "Yemen"
levels(population$name) <- c(levels(population$name), "Ivory Coast")
population$name[population$name == "Cote d'Ivoire"] <- "Ivory Coast"
levels(population$name) <- c(levels(population$name), "Kyrgyzstan")
population$name[population$name == "Kyrgyz Republic"] <- "Kyrgyzstan"
levels(population$name) <- c(levels(population$name), "Syria")
population$name[population$name == "Syrian Arab Republic"] <- "Syria"
levels(population$name) <- c(levels(population$name), "Republic of the Congo")
population$name[population$name == "Congo, Rep."] <- "Republic of the Congo"
levels(population$name) <- c(levels(population$name), "Laos")
population$name[population$name == "Lao PDR"] <- "Laos"
levels(population$name) <- c(levels(population$name), "Slovakia")
population$name[population$name == "Slovak Republic"] <- "Slovakia"
levels(population$name) <- c(levels(population$name), "Macedonia")
population$name[population$name == "Macedonia, FYR"] <- "Macedonia"
levels(population$name) <- c(levels(population$name), "Guinea Bissau")
population$name[population$name == "Guinea-Bissau"] <- "Guinea Bissau"
levels(population$name) <- c(levels(population$name), "South Korea")
population$name[population$name == "Korea, Rep."] <- "South Korea"
levels(population$name) <- c(levels(population$name), "North Korea")
population$name[population$name == "Korea, Dem. People’s Rep."] <- "North Korea"
}
setwd('/home/nicole/Data Science/exam_big_data')
states <- geojsonio::geojson_read("prova.geo.json", what = "sp")
class(states)
prova <- merge(states, population, by="name")
m <- leaflet(prova) %>%
setView(-1, 42, zoom=2) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
bins <- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf)
pal <- colorBin("YlOrRd", domain = states$density, bins = bins)
labels <- sprintf(
"<strong>%s</strong><br/>%g people / m<sup>2</sup>",
prova$name, prova$Density2017
) %>% lapply(htmltools::HTML)
m <- m %>% addPolygons(
fillColor = ~pal(Density2017),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
m
library(htmlwidgets)
setwd('/home/nicole/Data Science/exam_big_data')
saveWidget(m, 'map.html', selfcontained = TRUE)
{
library(leaflet)
library(dplyr)
library(rgdal)
library(ggplot2)
library(geojsonio)
library(rworldmap)
library(countrycode)
library(tidyr)
library(stringr)
}
setwd('/home/nicole/Data Science/exam_big_data/Clean')
population2 <- read.csv("population_clean.csv")
population <- read.csv("population_clean_with_NAs.csv")
density2 <- read.csv("density_clean.csv")
density <- read.csv("density_clean_with_NAs.csv")
population <- density
colnames(population)[2] <- "name"
{
levels(population$name) <- c(levels(population$name), "United States of America")
population$name[population$name == 'United States'] <- "United States of America"
levels(population$name) <- c(levels(population$name), "Russia")
population$name[population$name == 'Russian Federation'] <- "Russia"
levels(population$name) <- c(levels(population$name), "Democratic Republic of the Congo")
population$name[population$name == "Congo, Dem. Rep."] <- "Democratic Republic of the Congo"
levels(population$name) <- c(levels(population$name), "Iran")
population$name[population$name == "Iran, Islamic Rep."] <- "Iran"
levels(population$name) <- c(levels(population$name), "Republic of Serbia")
population$name[population$name == "Serbia"] <- "Republic of Serbia"
levels(population$name) <- c(levels(population$name), "Egypt")
population$name[population$name == "Egypt, Arab Rep."] <- "Egypt"
levels(population$name) <- c(levels(population$name), "Venezuela")
population$name[population$name == 'Venezuela, RB'] <- "Venezuela"
levels(population$name) <- c(levels(population$name), "United Republic of Tanzania")
population$name[population$name == "Tanzania"] <- "United Republic of Tanzania"
levels(population$name) <- c(levels(population$name), "Yemen")
population$name[population$name == 'Yemen, Rep.'] <- "Yemen"
levels(population$name) <- c(levels(population$name), "Ivory Coast")
population$name[population$name == "Cote d'Ivoire"] <- "Ivory Coast"
levels(population$name) <- c(levels(population$name), "Kyrgyzstan")
population$name[population$name == "Kyrgyz Republic"] <- "Kyrgyzstan"
levels(population$name) <- c(levels(population$name), "Syria")
population$name[population$name == "Syrian Arab Republic"] <- "Syria"
levels(population$name) <- c(levels(population$name), "Republic of the Congo")
population$name[population$name == "Congo, Rep."] <- "Republic of the Congo"
levels(population$name) <- c(levels(population$name), "Laos")
population$name[population$name == "Lao PDR"] <- "Laos"
levels(population$name) <- c(levels(population$name), "Slovakia")
population$name[population$name == "Slovak Republic"] <- "Slovakia"
levels(population$name) <- c(levels(population$name), "Macedonia")
population$name[population$name == "Macedonia, FYR"] <- "Macedonia"
levels(population$name) <- c(levels(population$name), "Guinea Bissau")
population$name[population$name == "Guinea-Bissau"] <- "Guinea Bissau"
levels(population$name) <- c(levels(population$name), "South Korea")
population$name[population$name == "Korea, Rep."] <- "South Korea"
levels(population$name) <- c(levels(population$name), "North Korea")
population$name[population$name == "Korea, Dem. People’s Rep."] <- "North Korea"
}
setwd('/home/nicole/Data Science/exam_big_data')
states <- geojsonio::geojson_read("prova.geo.json", what = "sp")
class(states)
prova <- merge(states, population, by="name")
m <- leaflet(prova) %>%
setView(-1, 42, zoom=2) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
bins <- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf)
pal <- colorBin("YlOrRd", domain = states$density, bins = bins)
labels <- sprintf(
"<strong>%s</strong><br/>%g people / m<sup>2</sup>",
prova$name, prova$Density2017
) %>% lapply(htmltools::HTML)
m <- m %>% addPolygons(
fillColor = ~pal(Density2017),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
m
